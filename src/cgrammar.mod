/*
** Inserted at beginning of c files generated by bison
** REMEMBER:  Change bison.reset too.
*/

/*@-allmacros@*/
/*@+boolint@*/
/*@+charint@*/
/*@-macroparams@*/
/*@-macroundef@*/
/*@-unreachable@*/
/*@-macrospec@*/
/*@-varuse@*/
/*@+ignorequals@*/
/*@-macrostmt@*/
/*@-noeffect@*/
/*@-shadow@*/
/*@-exitarg@*/
/*@-macroredef@*/
/*@-uniondef@*/
/*@-compdef@*/
/*@-matchfields@*/
/*@-exportlocal@*/
/*@-evalorderuncon@*/
/*@-exportheader@*/
/*@-typeuse@*/
/*@-redecl@*/
/*@-redef@*/
/*@-noparams@*/
/*@-ansireserved@*/
/*@-fielduse@*/
/*@-ifblock@*/
/*@-elseifcomplete@*/
/*@-whileblock@*/
/*@-forblock@*/
/*@-branchstate@*/
/*@-readonlytrans@*/
/*@-namechecks@*/
/*@-usedef@*/
/*@-systemunrecog@*/
/*@-dependenttrans@*/
/*@-unqualifiedtrans@*/
/*@-nullassign@*/

/* < end of bison.head > */


/*  A Bison parser, made from cgrammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BADTOK	257
#define	SKIPTOK	258
#define	CTOK_ELIPSIS	259
#define	CASE	260
#define	DEFAULT	261
#define	CIF	262
#define	CELSE	263
#define	SWITCH	264
#define	WHILE	265
#define	DO	266
#define	CFOR	267
#define	GOTO	268
#define	CONTINUE	269
#define	BREAK	270
#define	RETURN	271
#define	TSEMI	272
#define	TLBRACE	273
#define	TRBRACE	274
#define	TCOMMA	275
#define	TCOLON	276
#define	TASSIGN	277
#define	TLPAREN	278
#define	TRPAREN	279
#define	TLSQBR	280
#define	TRSQBR	281
#define	TDOT	282
#define	TAMPERSAND	283
#define	TEXCL	284
#define	TTILDE	285
#define	TMINUS	286
#define	TPLUS	287
#define	TMULT	288
#define	TDIV	289
#define	TPERCENT	290
#define	TLT	291
#define	TGT	292
#define	TCIRC	293
#define	TBAR	294
#define	TQUEST	295
#define	CSIZEOF	296
#define	ARROW_OP	297
#define	CTYPEDEF	298
#define	COFFSETOF	299
#define	INC_OP	300
#define	DEC_OP	301
#define	LEFT_OP	302
#define	RIGHT_OP	303
#define	LE_OP	304
#define	GE_OP	305
#define	EQ_OP	306
#define	NE_OP	307
#define	AND_OP	308
#define	OR_OP	309
#define	MUL_ASSIGN	310
#define	DIV_ASSIGN	311
#define	MOD_ASSIGN	312
#define	ADD_ASSIGN	313
#define	SUB_ASSIGN	314
#define	LEFT_ASSIGN	315
#define	RIGHT_ASSIGN	316
#define	AND_ASSIGN	317
#define	XOR_ASSIGN	318
#define	OR_ASSIGN	319
#define	CSTRUCT	320
#define	CUNION	321
#define	CENUM	322
#define	VA_ARG	323
#define	VA_DCL	324
#define	QGLOBALS	325
#define	QMODIFIES	326
#define	QNOMODS	327
#define	QCONSTANT	328
#define	QFUNCTION	329
#define	QITER	330
#define	QDEFINES	331
#define	QUSES	332
#define	QALLOCATES	333
#define	QSETS	334
#define	QRELEASES	335
#define	QPRECLAUSE	336
#define	QPOSTCLAUSE	337
#define	QALT	338
#define	QUNDEF	339
#define	QKILLED	340
#define	QENDMACRO	341
#define	LLMACRO	342
#define	LLMACROITER	343
#define	LLMACROEND	344
#define	TENDMACRO	345
#define	QSWITCHBREAK	346
#define	QLOOPBREAK	347
#define	QINNERBREAK	348
#define	QSAFEBREAK	349
#define	QINNERCONTINUE	350
#define	QFALLTHROUGH	351
#define	QLINTNOTREACHED	352
#define	QLINTFALLTHROUGH	353
#define	QLINTFALLTHRU	354
#define	QARGSUSED	355
#define	QPRINTFLIKE	356
#define	QLINTPRINTFLIKE	357
#define	QSCANFLIKE	358
#define	QMESSAGELIKE	359
#define	QNOTREACHED	360
#define	QCONST	361
#define	QVOLATILE	362
#define	QINLINE	363
#define	QEXTENSION	364
#define	QEXTERN	365
#define	QSTATIC	366
#define	QAUTO	367
#define	QREGISTER	368
#define	QOUT	369
#define	QIN	370
#define	QYIELD	371
#define	QONLY	372
#define	QTEMP	373
#define	QSHARED	374
#define	QREF	375
#define	QUNIQUE	376
#define	QCHECKED	377
#define	QUNCHECKED	378
#define	QCHECKEDSTRICT	379
#define	QCHECKMOD	380
#define	QKEEP	381
#define	QKEPT	382
#define	QPARTIAL	383
#define	QSPECIAL	384
#define	QOWNED	385
#define	QDEPENDENT	386
#define	QRETURNED	387
#define	QEXPOSED	388
#define	QNULL	389
#define	QOBSERVER	390
#define	QISNULL	391
#define	QEXITS	392
#define	QMAYEXIT	393
#define	QNEVEREXIT	394
#define	QTRUEEXIT	395
#define	QFALSEEXIT	396
#define	QLONG	397
#define	QSIGNED	398
#define	QUNSIGNED	399
#define	QSHORT	400
#define	QUNUSED	401
#define	QSEF	402
#define	QNOTNULL	403
#define	QRELNULL	404
#define	QABSTRACT	405
#define	QCONCRETE	406
#define	QMUTABLE	407
#define	QIMMUTABLE	408
#define	QTRUENULL	409
#define	QFALSENULL	410
#define	QEXTERNAL	411
#define	QREFCOUNTED	412
#define	QREFS	413
#define	QNEWREF	414
#define	QTEMPREF	415
#define	QKILLREF	416
#define	QRELDEF	417
#define	CGCHAR	418
#define	CBOOL	419
#define	CINT	420
#define	CGFLOAT	421
#define	CDOUBLE	422
#define	CVOID	423
#define	QANYTYPE	424
#define	QINTEGRALTYPE	425
#define	QUNSIGNEDINTEGRALTYPE	426
#define	QSIGNEDINTEGRALTYPE	427
#define	IDENTIFIER	428
#define	NEW_IDENTIFIER	429
#define	CCONSTANT	430
#define	ITER_NAME	431
#define	ITER_ENDNAME	432
#define	TYPE_NAME	433
#define	TYPE_NAME_OR_ID	434

#line 19 "cgrammar.y"

/*
**
** cgrammar.y
**
** Yacc/Bison grammar for extended ANSI C used by LCLint.
**
** original grammar by Nate Osgood ---
**    hacrat@catfish.lcs.mit.edu Mon Jun 14 13:06:32 1993
**
** changes for LCLint --- handle typedef names correctly
** fix struct/union parsing bug (empty struct is accepted)
** add productions to handle macros --- require
** error correction --- main source of conflicts in grammar.
** need to process initializations sequentially, L->R
**
** production names are cryptic, so more productions fit on one line
**
** conflicts:  87 shift/reduce, 18 reduce/reduce
** most of these are due to handling macros
** a few are due to handling type expressions
*/

/*@=allmacros@*/

extern int yylex ();
extern void swallowMacro (void);

# include "lclintMacros.nf"
# include "basic.h"
# include "cgrammar.h"
# include "exprChecks.h"

/*@-allmacros@*/
/*@-matchfields@*/

# define SHOWCSYM FALSE
void yyerror (char *s);

#line 59 "cgrammar.y"
typedef union
{
 lltok tok;
 int count;
 specialClauseKind sck;
 qual typequal;
 qualList tquallist;
 ctype ctyp;
 sRef sr;
 /*@only@*/ qtype qtyp;
 /*@only@*/ cstring cname;
 /*@only@*/ idDecl ntyp;
 /*@only@*/ idDeclList ntyplist;
 /*@only@*/ uentryList flist;
 /*@owned@*/ uentryList entrylist;
 /*@observer@*/ /*@dependent@*/ uentry entry;
 /*@only@*/ uentry oentry;
 /*@only@*/ exprNode expr;
 /*@only@*/ enumNameList enumnamelist;
 /*@only@*/ exprNodeList alist;
 /*@only@*/ sRefSet srset; 
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1150
#define	YYFLAG		-32768
#define	YYNTBASE	181

#define YYTRANSLATE(x) ((unsigned)(x) <= 434 ? yytranslate[x] : 407)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    13,    15,    17,    19,
    21,    23,    32,    44,    45,    51,    53,    57,    59,    62,
    64,    71,    75,    82,    83,    90,    91,    99,   101,   108,
   112,   119,   120,   127,   128,   136,   137,   138,   149,   153,
   157,   161,   164,   166,   167,   170,   171,   174,   176,   179,
   181,   184,   186,   189,   191,   195,   198,   200,   202,   204,
   206,   208,   210,   212,   213,   216,   217,   224,   225,   232,
   234,   236,   237,   238,   244,   245,   251,   253,   255,   256,
   258,   259,   260,   264,   265,   269,   271,   273,   275,   277,
   279,   281,   283,   285,   287,   289,   291,   293,   295,   297,
   299,   301,   303,   304,   312,   313,   322,   324,   328,   329,
   333,   334,   338,   341,   345,   348,   351,   353,   355,   357,
   361,   366,   369,   373,   377,   381,   383,   385,   387,   391,
   393,   395,   399,   404,   407,   411,   415,   419,   421,   425,
   427,   429,   431,   435,   437,   439,   441,   446,   450,   455,
   462,   468,   474,   477,   480,   482,   486,   488,   491,   494,
   497,   500,   503,   506,   509,   512,   514,   516,   526,   527,
   531,   536,   539,   541,   546,   548,   552,   556,   560,   562,
   566,   570,   572,   576,   580,   582,   586,   590,   594,   598,
   600,   604,   608,   610,   614,   616,   620,   622,   626,   628,
   629,   634,   636,   637,   642,   644,   645,   646,   654,   656,
   660,   664,   668,   672,   676,   680,   684,   688,   692,   696,
   700,   702,   706,   707,   709,   711,   713,   715,   717,   721,
   722,   732,   733,   745,   748,   749,   756,   757,   765,   770,
   775,   776,   777,   780,   782,   787,   788,   793,   795,   799,
   804,   806,   810,   812,   814,   816,   818,   820,   823,   826,
   829,   832,   835,   838,   841,   844,   847,   850,   853,   856,
   859,   862,   865,   868,   871,   874,   877,   880,   883,   886,
   889,   892,   895,   898,   901,   904,   907,   910,   913,   916,
   919,   922,   925,   928,   931,   934,   937,   940,   943,   946,
   949,   952,   955,   957,   959,   961,   963,   966,   969,   972,
   975,   978,   981,   984,   987,   990,   993,   996,   999,  1002,
  1005,  1009,  1011,  1016,  1018,  1022,  1025,  1028,  1031,  1032,
  1034,  1035,  1036,  1048,  1049,  1050,  1062,  1069,  1076,  1077,
  1078,  1089,  1090,  1091,  1102,  1108,  1114,  1119,  1124,  1125,
  1127,  1129,  1132,  1138,  1142,  1145,  1150,  1152,  1155,  1159,
  1166,  1167,  1176,  1181,  1183,  1187,  1190,  1192,  1197,  1199,
  1201,  1204,  1207,  1209,  1212,  1214,  1217,  1219,  1221,  1223,
  1226,  1228,  1231,  1234,  1238,  1240,  1244,  1246,  1250,  1252,
  1254,  1258,  1259,  1262,  1263,  1268,  1273,  1275,  1277,  1280,
  1282,  1284,  1287,  1288,  1290,  1296,  1299,  1303,  1307,  1312,
  1316,  1321,  1326,  1332,  1334,  1336,  1338,  1340,  1342,  1344,
  1346,  1348,  1350,  1352,  1354,  1356,  1359,  1362,  1370,  1377,
  1380,  1381,  1382,  1393,  1394,  1401,  1403,  1405,  1407,  1409,
  1412,  1414,  1416,  1418,  1420,  1422,  1424,  1426,  1430,  1432,
  1435,  1438,  1441,  1443,  1445,  1447,  1449,  1451,  1453,  1455,
  1457,  1459,  1461,  1465,  1467,  1469,  1473,  1476,  1477,  1483,
  1484,  1491,  1492,  1497,  1498,  1504,  1508,  1511,  1515,  1516,
  1517,  1518,  1519,  1520,  1522,  1525,  1528,  1532,  1535,  1539,
  1543,  1548,  1551,  1554,  1558,  1562,  1567,  1569,  1572,  1574,
  1577,  1579,  1582,  1584,  1587,  1589,  1592,  1594,  1599,  1602,
  1603,  1609,  1610,  1617,  1622,  1627,  1628,  1629,  1640,  1642,
  1643,  1648,  1650,  1652,  1654,  1656,  1658,  1662,  1664,  1669,
  1673,  1678,  1685,  1691,  1697,  1700,  1703,  1705,  1708,  1711,
  1714,  1717,  1720,  1723,  1726,  1729,  1731,  1733,  1738,  1740,
  1744,  1748,  1752,  1754,  1758,  1762,  1764,  1768,  1772,  1774,
  1778,  1782,  1786,  1790,  1792,  1796,  1800,  1802,  1806,  1808,
  1812,  1814,  1818,  1820,  1824,  1826,  1830,  1832,  1833,  1834,
  1842,  1844,  1848,  1852,  1856,  1860,  1864,  1868,  1872,  1876,
  1880,  1884,  1888,  1890,  1891,  1893,  1896,  1904,  1907,  1910,
  1918,  1925,  1928,  1932,  1935,  1939,  1942,  1946,  1950,  1954,
  1958,  1961,  1965,  1966,  1968,  1970,  1972,  1974,  1976,  1978,
  1980
};

static const short yyrhs[] = {    -1,
   182,     0,   183,     0,   182,   183,     0,   235,   403,     0,
   184,     0,   185,     0,   195,     0,   198,     0,   271,     0,
     1,     0,    74,   291,   304,   314,   304,   403,   279,    87,
     0,    74,   291,   304,   314,   304,    23,   279,   284,   283,
   403,    87,     0,     0,    75,   186,   187,   403,    87,     0,
   188,     0,   291,   304,   188,     0,   192,     0,   318,   192,
     0,   405,     0,   279,    24,   304,   314,   279,    25,     0,
   189,    26,    27,     0,   189,    26,   279,   270,    27,   304,
     0,     0,   189,   280,    24,    25,   190,   200,     0,     0,
   189,   280,    24,   315,    25,   191,   200,     0,   405,     0,
   279,    24,   304,   188,   279,    25,     0,   192,    26,    27,
     0,   192,    26,   279,   270,    27,   304,     0,     0,   192,
   280,    24,    25,   193,   202,     0,     0,   192,   280,    24,
   315,    25,   194,   202,     0,     0,     0,    76,   405,    24,
   315,    25,   196,   202,   197,   403,    87,     0,    88,   344,
    91,     0,    89,   331,    91,     0,    90,   332,    91,     0,
    88,    91,     0,   231,     0,     0,   201,   204,     0,     0,
   203,   205,     0,   212,     0,   206,   212,     0,   215,     0,
   206,   215,     0,   228,     0,   228,   206,     0,   208,     0,
   207,    21,   208,     0,   211,   209,     0,   404,     0,   175,
     0,    85,     0,    86,     0,   115,     0,   116,     0,   129,
     0,     0,   210,   211,     0,     0,    71,   213,   364,   403,
    87,   218,     0,     0,    71,   214,   207,   403,    87,   218,
     0,    73,     0,   219,     0,     0,     0,    71,   216,   364,
   403,   218,     0,     0,    71,   217,   207,   403,   218,     0,
    73,     0,   221,     0,     0,   219,     0,     0,     0,    72,
   220,   236,     0,     0,    72,   222,   237,     0,    77,     0,
    78,     0,    79,     0,    80,     0,    81,     0,    87,     0,
    87,     0,    82,     0,    83,     0,   118,     0,   136,     0,
   134,     0,   132,     0,   131,     0,   120,     0,   137,     0,
   149,     0,     0,   223,   304,   229,   242,   403,   225,   279,
     0,     0,   226,   304,   227,   230,   242,   403,   224,   279,
     0,   314,     0,   291,   304,   314,     0,     0,    19,   233,
   360,     0,     0,   364,   234,   353,     0,   199,   232,     0,
   240,   403,    87,     0,   403,    87,     0,   240,   403,     0,
   403,     0,   404,     0,   175,     0,   238,    26,    27,     0,
   238,    26,   239,    27,     0,    34,   238,     0,    24,   238,
    25,     0,   238,    28,   405,     0,   238,    43,   405,     0,
   238,     0,   176,     0,   238,     0,   240,    21,   238,     0,
   404,     0,   175,     0,   241,    26,    27,     0,   241,    26,
   239,    27,     0,    34,   241,     0,    24,   241,    25,     0,
   241,    28,   405,     0,   241,    43,   405,     0,   241,     0,
   242,    21,   241,     0,   404,     0,   175,     0,   176,     0,
    24,   268,    25,     0,   180,     0,   110,     0,   243,     0,
   244,    26,   268,    27,     0,   244,    24,    25,     0,   244,
    24,   245,    25,     0,    69,    24,   267,    21,   326,    25,
     0,   244,   304,    28,   405,   279,     0,   244,   304,    43,
   405,   279,     0,   244,    46,     0,   244,    47,     0,   267,
     0,   245,    21,   267,     0,   244,     0,    46,   246,     0,
    47,   246,     0,    29,   251,     0,    34,   251,     0,    33,
   251,     0,    32,   251,     0,    31,   251,     0,    30,   251,
     0,   248,     0,   247,     0,    45,   279,    24,   326,   304,
    21,   405,    25,   279,     0,     0,   279,   249,   250,     0,
    42,    24,   326,    25,     0,    42,   246,     0,   246,     0,
    24,   326,    25,   251,     0,   251,     0,   252,    34,   251,
     0,   252,    35,   251,     0,   252,    36,   251,     0,   252,
     0,   253,    33,   252,     0,   253,    32,   252,     0,   253,
     0,   254,    48,   253,     0,   254,    49,   253,     0,   254,
     0,   255,    37,   254,     0,   255,    38,   254,     0,   255,
    50,   254,     0,   255,    51,   254,     0,   255,     0,   256,
    52,   255,     0,   256,    53,   255,     0,   256,     0,   257,
    29,   256,     0,   257,     0,   258,    39,   257,     0,   258,
     0,   259,    40,   258,     0,   259,     0,     0,   260,    54,
   261,   259,     0,   260,     0,     0,   262,    55,   263,   260,
     0,   262,     0,     0,     0,   262,    41,   265,   268,    22,
   266,   264,     0,   264,     0,   246,    23,   267,     0,   246,
    56,   267,     0,   246,    57,   267,     0,   246,    58,   267,
     0,   246,    59,   267,     0,   246,    60,   267,     0,   246,
    61,   267,     0,   246,    62,   267,     0,   246,    63,   267,
     0,   246,    64,   267,     0,   246,    65,   267,     0,   267,
     0,   268,    21,   267,     0,     0,   268,     0,   264,     0,
   272,     0,    70,     0,   277,     0,   291,   279,    18,     0,
     0,   291,   304,   314,   304,   273,   279,   283,    18,   279,
     0,     0,   291,   304,   314,   304,    23,   274,   279,   284,
   283,    18,   279,     0,   314,   304,     0,     0,   314,   304,
    23,   276,   279,   284,     0,     0,    44,   291,   278,   304,
   281,   279,    18,     0,    44,   291,   279,    18,     0,    44,
   281,   279,    18,     0,     0,     0,   282,   279,     0,   275,
     0,   281,    21,   304,   275,     0,     0,   283,    21,   304,
   275,     0,   267,     0,    19,   285,    20,     0,    19,   285,
    21,    20,     0,   284,     0,   285,    21,   284,     0,   111,
     0,   109,     0,   112,     0,   113,     0,   114,     0,   107,
   279,     0,   108,   279,     0,   115,   279,     0,   116,   279,
     0,   129,   279,     0,   130,   279,     0,   131,   279,     0,
   132,   279,     0,   117,   279,     0,   119,   279,     0,   118,
   279,     0,   127,   279,     0,   128,   279,     0,   120,   279,
     0,   122,   279,     0,   138,   279,     0,   139,   279,     0,
   141,   279,     0,   142,   279,     0,   140,   279,     0,   135,
   279,     0,   150,   279,     0,   133,   279,     0,   134,   279,
     0,   136,   279,     0,   123,   279,     0,   126,   279,     0,
   124,   279,     0,   125,   279,     0,   155,   279,     0,   156,
   279,     0,   147,   279,     0,   157,   279,     0,   148,   279,
     0,   151,   279,     0,   152,   279,     0,   153,   279,     0,
   154,   279,     0,   149,   279,     0,   158,   279,     0,   159,
   279,     0,   162,   279,     0,   163,   279,     0,   160,   279,
     0,   161,   279,     0,   146,     0,   143,     0,   144,     0,
   145,     0,   164,   304,     0,   166,   304,     0,   165,   304,
     0,   167,   304,     0,   168,   304,     0,   169,   304,     0,
   170,   304,     0,   171,   304,     0,   172,   304,     0,   173,
   304,     0,   406,   304,     0,   295,   304,     0,   309,   304,
     0,   288,   304,     0,   279,   291,   279,     0,   293,     0,
   293,    84,   292,    87,     0,   326,     0,   326,    21,   292,
     0,   286,   294,     0,   287,   294,     0,   289,   294,     0,
     0,   291,     0,     0,     0,   304,    66,   405,   279,    19,
   296,   357,   305,   358,   297,    20,     0,     0,     0,   304,
    67,   405,   279,    19,   298,   357,   305,   358,   299,    20,
     0,   304,    66,   405,   279,    19,    20,     0,   304,    67,
   405,   279,    19,    20,     0,     0,     0,   304,    66,   279,
    19,   300,   357,   305,   358,   301,    20,     0,     0,     0,
   304,    67,   279,    19,   302,   357,   305,   358,   303,    20,
     0,   304,    66,   279,    19,    20,     0,   304,    67,   279,
    19,    20,     0,   304,    66,   405,   304,     0,   304,    67,
   405,   304,     0,     0,   306,     0,   198,     0,   305,   306,
     0,   291,   304,   307,   279,    18,     0,   291,   279,    18,
     0,   308,   304,     0,   307,    21,   308,   304,     0,   314,
     0,    22,   270,     0,   314,    22,   270,     0,   304,    68,
    19,   311,    20,   279,     0,     0,   304,    68,   405,    19,
   310,   311,    20,   279,     0,   304,    68,   405,   279,     0,
   312,     0,   311,    21,   312,     0,   311,    21,     0,   405,
     0,   405,    23,   279,   270,     0,   189,     0,   328,     0,
   318,   179,     0,   318,   313,     0,   189,     0,   318,   189,
     0,   321,     0,   304,   319,     0,   107,     0,   108,     0,
   316,     0,   317,   316,     0,    34,     0,    34,   317,     0,
    34,   318,     0,    34,   317,   318,     0,   320,     0,   320,
    21,     5,     0,   405,     0,   320,    21,   405,     0,     5,
     0,   322,     0,   322,    21,     5,     0,     0,   323,   325,
     0,     0,   322,    21,   324,   325,     0,   279,   291,   313,
   279,     0,   405,     0,   290,     0,   290,   327,     0,   318,
     0,   329,     0,   318,   329,     0,     0,   329,     0,   279,
    24,   304,   327,    25,     0,    26,    27,     0,    26,   270,
    27,     0,   329,    26,    27,     0,   329,    26,   270,    27,
     0,   279,    24,    25,     0,   279,    24,   321,    25,     0,
   329,   279,    24,    25,     0,   329,   279,    24,   321,    25,
     0,   346,     0,   347,     0,   350,     0,   353,     0,   366,
     0,   369,     0,   400,     0,   374,     0,   402,     0,   333,
     0,   331,     0,   340,     0,   333,   340,     0,   373,   333,
     0,   399,   345,    11,    24,   268,    25,    18,     0,   399,
   345,    11,    24,   268,    25,     0,   335,   340,     0,     0,
     0,    13,    24,   269,    18,   269,    18,   336,   269,   337,
    25,     0,     0,   177,   355,    24,   339,   377,    25,     0,
   178,     0,   346,     0,   347,     0,   350,     0,   342,   364,
     0,   342,     0,   343,     0,   366,     0,   341,     0,   334,
     0,   338,     0,   402,     0,    24,   340,    25,     0,     1,
     0,   368,   340,     0,   355,    19,     0,   359,    20,     0,
   345,     0,   363,     0,   346,     0,   347,     0,   350,     0,
   354,     0,   367,     0,   369,     0,   374,     0,   401,     0,
    24,   345,    25,     0,   402,     0,     1,     0,   405,    22,
   330,     0,   106,   330,     0,     0,     6,   270,   348,    22,
   330,     0,     0,    97,     6,   270,   349,    22,   330,     0,
     0,     7,   351,    22,   330,     0,     0,    97,     7,   352,
    22,   330,     0,    24,   353,    25,     0,   355,   361,     0,
   355,   362,   356,     0,     0,     0,     0,     0,     0,    20,
     0,   106,    20,     0,   365,    20,     0,   365,   106,    20,
     0,   364,    20,     0,   364,   106,    20,     0,   364,   365,
    20,     0,   364,   365,   106,    20,     0,    19,   360,     0,
    19,    20,     0,    19,   363,    20,     0,    19,   364,    20,
     0,    19,   364,   365,    20,     0,   345,     0,   363,   345,
     0,   271,     0,   364,   271,     0,   330,     0,   365,   330,
     0,    18,     0,   268,    18,     0,    18,     0,   268,    18,
     0,   268,     0,     8,    24,   268,    25,     0,   368,   330,
     0,     0,   368,   330,     9,   370,   330,     0,     0,    10,
    24,   268,   371,    25,   330,     0,    11,    24,   268,    25,
     0,    11,    24,   268,    25,     0,     0,     0,   177,   375,
   355,    24,   376,   377,    25,   353,   398,   356,     0,   379,
     0,     0,   377,   378,    21,   379,     0,   397,     0,   404,
     0,   180,     0,   175,     0,   176,     0,    24,   268,    25,
     0,   380,     0,   244,    26,   268,    27,     0,   244,    24,
    25,     0,   244,    24,   245,    25,     0,    69,    24,   267,
    21,   326,    25,     0,   244,   304,    28,   405,   279,     0,
   244,   304,    43,   405,   279,     0,   244,    46,     0,   244,
    47,     0,   381,     0,    46,   246,     0,    47,   246,     0,
    29,   251,     0,    34,   251,     0,    33,   251,     0,    32,
   251,     0,    31,   251,     0,    30,   251,     0,   248,     0,
   382,     0,    24,   326,    25,   251,     0,   383,     0,   252,
    34,   251,     0,   252,    35,   251,     0,   252,    36,   251,
     0,   384,     0,   253,    33,   252,     0,   253,    32,   252,
     0,   385,     0,   254,    48,   253,     0,   254,    49,   253,
     0,   386,     0,   255,    37,   254,     0,   255,    38,   254,
     0,   255,    50,   254,     0,   255,    51,   254,     0,   387,
     0,   256,    52,   255,     0,   256,    53,   255,     0,   388,
     0,   257,    29,   256,     0,   389,     0,   258,    39,   257,
     0,   390,     0,   259,    40,   258,     0,   391,     0,   260,
    54,   259,     0,   392,     0,   262,    55,   260,     0,   393,
     0,     0,     0,   262,    41,   395,   268,    22,   396,   264,
     0,   394,     0,   246,    23,   267,     0,   246,    56,   267,
     0,   246,    57,   267,     0,   246,    58,   267,     0,   246,
    59,   267,     0,   246,    60,   267,     0,   246,    61,   267,
     0,   246,    62,   267,     0,   246,    63,   267,     0,   246,
    64,   267,     0,   246,    65,   267,     0,   178,     0,     0,
    12,     0,   372,   330,     0,   399,   330,    11,    24,   268,
    25,    18,     0,   335,   330,     0,   372,   345,     0,   399,
   345,    11,    24,   268,    25,    18,     0,   399,   345,    11,
    24,   268,    25,     0,   335,   345,     0,    14,   405,    18,
     0,    15,    18,     0,    96,    15,    18,     0,    16,    18,
     0,    92,    16,    18,     0,    93,    16,    18,     0,    94,
    16,    18,     0,    95,    16,    18,     0,    17,    18,     0,
    17,   268,    18,     0,     0,    18,     0,   174,     0,   175,
     0,   177,     0,   178,     0,   174,     0,   179,     0,   180,
     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   215,   216,   219,   220,   223,   224,   225,   226,   227,   228,
   229,   232,   234,   238,   238,   243,   249,   253,   254,   258,
   259,   261,   263,   279,   283,   290,   294,   300,   301,   303,
   305,   321,   325,   332,   336,   342,   344,   344,   348,   349,
   350,   351,   354,   357,   358,   361,   362,   365,   366,   369,
   370,   373,   374,   377,   378,   381,   384,   385,   388,   389,
   390,   391,   392,   395,   396,   399,   399,   402,   402,   405,
   409,   410,   413,   413,   416,   416,   419,   423,   424,   427,
   428,   431,   437,   444,   450,   457,   458,   459,   460,   461,
   464,   467,   470,   471,   474,   475,   476,   477,   478,   479,
   480,   481,   484,   490,   497,   503,   512,   518,   522,   524,
   528,   531,   538,   546,   547,   550,   551,   554,   555,   556,
   557,   558,   559,   560,   561,   565,   566,   570,   571,   574,
   576,   578,   579,   580,   581,   582,   584,   588,   592,   604,
   605,   606,   607,   608,   609,   612,   613,   614,   615,   616,
   617,   618,   619,   620,   623,   624,   627,   628,   629,   630,
   631,   632,   633,   634,   635,   636,   637,   640,   644,   645,
   648,   649,   652,   653,   657,   658,   659,   660,   663,   664,
   665,   668,   669,   670,   673,   674,   675,   676,   677,   680,
   681,   682,   685,   686,   689,   690,   694,   695,   698,   699,
   704,   710,   711,   717,   723,   724,   724,   726,   729,   730,
   731,   732,   733,   734,   735,   736,   737,   738,   739,   740,
   743,   744,   747,   748,   751,   756,   757,   758,   761,   774,
   778,   779,   782,   787,   788,   788,   793,   794,   795,   796,
   799,   802,   805,   808,   809,   812,   813,   816,   817,   818,
   822,   824,   833,   834,   835,   836,   837,   840,   841,   842,
   843,   844,   845,   846,   847,   848,   849,   850,   851,   852,
   853,   854,   855,   856,   857,   858,   859,   860,   861,   862,
   863,   864,   865,   866,   867,   868,   869,   870,   871,   872,
   873,   874,   875,   876,   877,   878,   879,   880,   881,   882,
   883,   884,   887,   888,   889,   890,   893,   894,   895,   896,
   897,   898,   899,   900,   901,   902,   903,   904,   905,   906,
   909,   913,   914,   918,   919,   923,   924,   925,   928,   929,
   932,   934,   936,   937,   939,   941,   942,   944,   946,   948,
   950,   951,   953,   955,   956,   958,   960,   961,   964,   967,
   968,   969,   972,   974,   978,   980,   984,   985,   986,   989,
   991,   991,   993,   996,   998,  1000,  1003,  1008,  1015,  1016,
  1017,  1024,  1028,  1029,  1033,  1034,  1037,  1038,  1041,  1042,
  1045,  1046,  1047,  1048,  1051,  1052,  1055,  1056,  1059,  1060,
  1061,  1064,  1064,  1065,  1066,  1069,  1081,  1097,  1098,  1101,
  1102,  1103,  1106,  1107,  1110,  1112,  1113,  1114,  1115,  1116,
  1118,  1120,  1122,  1128,  1129,  1130,  1131,  1132,  1133,  1134,
  1135,  1136,  1139,  1142,  1145,  1146,  1150,  1152,  1154,  1156,
  1160,  1161,  1163,  1167,  1169,  1171,  1174,  1175,  1176,  1177,
  1178,  1179,  1180,  1181,  1182,  1183,  1184,  1185,  1186,  1189,
  1195,  1198,  1201,  1202,  1205,  1206,  1207,  1208,  1209,  1210,
  1211,  1212,  1213,  1214,  1215,  1218,  1219,  1225,  1226,  1227,
  1228,  1231,  1232,  1233,  1234,  1237,  1238,  1242,  1245,  1248,
  1251,  1254,  1257,  1260,  1261,  1262,  1263,  1265,  1266,  1268,
  1270,  1277,  1281,  1283,  1285,  1287,  1291,  1292,  1295,  1296,
  1299,  1300,  1303,  1304,  1307,  1308,  1309,  1312,  1320,  1325,
  1326,  1330,  1331,  1334,  1339,  1342,  1343,  1344,  1352,  1353,
  1353,  1357,  1358,  1359,  1370,  1377,  1378,  1381,  1382,  1383,
  1384,  1385,  1387,  1388,  1389,  1390,  1393,  1394,  1395,  1396,
  1397,  1398,  1399,  1400,  1401,  1402,  1405,  1406,  1409,  1410,
  1411,  1412,  1415,  1416,  1417,  1420,  1421,  1422,  1425,  1426,
  1427,  1428,  1429,  1432,  1433,  1434,  1437,  1438,  1441,  1442,
  1446,  1447,  1450,  1451,  1454,  1455,  1458,  1459,  1460,  1461,
  1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,  1472,  1473,
  1474,  1475,  1478,  1479,  1482,  1485,  1487,  1489,  1493,  1494,
  1496,  1498,  1501,  1502,  1503,  1505,  1506,  1507,  1508,  1509,
  1510,  1511,  1514,  1515,  1518,  1521,  1522,  1523,  1524,  1527,
  1528
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BADTOK",
"SKIPTOK","CTOK_ELIPSIS","CASE","DEFAULT","CIF","CELSE","SWITCH","WHILE","DO",
"CFOR","GOTO","CONTINUE","BREAK","RETURN","TSEMI","TLBRACE","TRBRACE","TCOMMA",
"TCOLON","TASSIGN","TLPAREN","TRPAREN","TLSQBR","TRSQBR","TDOT","TAMPERSAND",
"TEXCL","TTILDE","TMINUS","TPLUS","TMULT","TDIV","TPERCENT","TLT","TGT","TCIRC",
"TBAR","TQUEST","CSIZEOF","ARROW_OP","CTYPEDEF","COFFSETOF","INC_OP","DEC_OP",
"LEFT_OP","RIGHT_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP","OR_OP","MUL_ASSIGN",
"DIV_ASSIGN","MOD_ASSIGN","ADD_ASSIGN","SUB_ASSIGN","LEFT_ASSIGN","RIGHT_ASSIGN",
"AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","CSTRUCT","CUNION","CENUM","VA_ARG","VA_DCL",
"QGLOBALS","QMODIFIES","QNOMODS","QCONSTANT","QFUNCTION","QITER","QDEFINES",
"QUSES","QALLOCATES","QSETS","QRELEASES","QPRECLAUSE","QPOSTCLAUSE","QALT","QUNDEF",
"QKILLED","QENDMACRO","LLMACRO","LLMACROITER","LLMACROEND","TENDMACRO","QSWITCHBREAK",
"QLOOPBREAK","QINNERBREAK","QSAFEBREAK","QINNERCONTINUE","QFALLTHROUGH","QLINTNOTREACHED",
"QLINTFALLTHROUGH","QLINTFALLTHRU","QARGSUSED","QPRINTFLIKE","QLINTPRINTFLIKE",
"QSCANFLIKE","QMESSAGELIKE","QNOTREACHED","QCONST","QVOLATILE","QINLINE","QEXTENSION",
"QEXTERN","QSTATIC","QAUTO","QREGISTER","QOUT","QIN","QYIELD","QONLY","QTEMP",
"QSHARED","QREF","QUNIQUE","QCHECKED","QUNCHECKED","QCHECKEDSTRICT","QCHECKMOD",
"QKEEP","QKEPT","QPARTIAL","QSPECIAL","QOWNED","QDEPENDENT","QRETURNED","QEXPOSED",
"QNULL","QOBSERVER","QISNULL","QEXITS","QMAYEXIT","QNEVEREXIT","QTRUEEXIT","QFALSEEXIT",
"QLONG","QSIGNED","QUNSIGNED","QSHORT","QUNUSED","QSEF","QNOTNULL","QRELNULL",
"QABSTRACT","QCONCRETE","QMUTABLE","QIMMUTABLE","QTRUENULL","QFALSENULL","QEXTERNAL",
"QREFCOUNTED","QREFS","QNEWREF","QTEMPREF","QKILLREF","QRELDEF","CGCHAR","CBOOL",
"CINT","CGFLOAT","CDOUBLE","CVOID","QANYTYPE","QINTEGRALTYPE","QUNSIGNEDINTEGRALTYPE",
"QSIGNEDINTEGRALTYPE","IDENTIFIER","NEW_IDENTIFIER","CCONSTANT","ITER_NAME",
"ITER_ENDNAME","TYPE_NAME","TYPE_NAME_OR_ID","file","externalDefs","externalDef",
"constantDecl","fcnDecl","@1","plainFcn","plainNamedDecl","namedDeclBase","@2",
"@3","plainNamedDeclBase","@4","@5","iterDecl","@6","@7","macroDef","fcnDefHdr",
"optGlobMods","@8","optPlainGlobMods","@9","optGlobModsRest","optPlainGlobModsRest",
"specialClauses","globIdList","globIdListExpr","globId","globQual","optGlobQuals",
"optGlobModsAux","@10","@11","optPlainGlobModsAux","@12","@13","optMods","fcnMods",
"@14","fcnPlainMods","@15","specialTag","endStateTag","endSpecialTag","stateSpecialClause",
"specialClauseType","specialClause","@16","@17","fcnDefHdrAux","fcnBody","@18",
"@19","fcnDef","locModifies","locPlainModifies","modListExpr","mExpr","modList",
"specClauseListExpr","specClauseList","primaryExpr","postfixExpr","argumentExprList",
"unaryExpr","offsetofExpr","sizeofExpr","@20","sizeofExprAux","castExpr","timesExpr",
"plusExpr","shiftExpr","relationalExpr","equalityExpr","bitandExpr","xorExpr",
"bitorExpr","andExpr","@21","orExpr","@22","conditionalExpr","@23","@24","assignExpr",
"expr","optExpr","constantExpr","initializer","instanceDecl","@25","@26","namedInitializer",
"@27","typeDecl","@28","IsType","PushType","namedInitializerList","namedInitializerListAux",
"optDeclarators","init","initList","storageSpecifier","typeQualifier","typeModifier",
"typeSpecifier","completeType","completeTypeSpecifier","altType","completeTypeSpecifierAux",
"optCompleteType","suSpc","@29","@30","@31","@32","@33","@34","@35","@36","NotType",
"structDeclList","structDecl","structNamedDeclList","structNamedDecl","enumSpc",
"@37","enumeratorList","enumerator","optNamedDecl","namedDecl","genericParamList",
"innerMods","innerModsList","pointers","paramIdList","idList","paramTypeList",
"paramList","@38","@39","paramDecl","typeExpression","abstractDecl","optAbstractDeclBase",
"abstractDeclBase","stmt","iterBody","endBody","iterDefStmtList","iterDefIterationStmt",
"forPred","@40","@41","partialIterStmt","@42","iterDefStmt","iterSelectionStmt",
"openScope","closeScope","macroBody","stmtErr","labeledStmt","caseStmt","@43",
"@44","defaultStmt","@45","@46","compoundStmt","compoundStmtErr","CreateInnerScope",
"DeleteInnerScope","CreateStructInnerScope","DeleteStructInnerScope","DeleteInnerScopeSafe",
"compoundStmtRest","compoundStmtAux","compoundStmtAuxErr","stmtListErr","initializerList",
"stmtList","expressionStmt","expressionStmtErr","ifPred","selectionStmt","@47",
"@48","whilePred","iterWhilePred","iterStmt","@49","@50","iterArgList","@51",
"iterArgExpr","primaryIterExpr","postfixIterExpr","unaryIterExpr","castIterExpr",
"timesIterExpr","plusIterExpr","shiftIterExpr","relationalIterExpr","equalityIterExpr",
"bitandIterExpr","xorIterExpr","bitorIterExpr","andIterExpr","orIterExpr","conditionalIterExpr",
"@52","@53","assignIterExpr","endIter","doHeader","iterationStmt","iterationStmtErr",
"jumpStmt","optSemi","id","newId","typeName", NULL
};
#endif

static const short yyr1[] = {     0,
   181,   181,   182,   182,   183,   183,   183,   183,   183,   183,
   183,   184,   184,   186,   185,   187,   187,   188,   188,   189,
   189,   189,   189,   190,   189,   191,   189,   192,   192,   192,
   192,   193,   192,   194,   192,   196,   197,   195,   198,   198,
   198,   198,   199,   201,   200,   203,   202,   204,   204,   205,
   205,   206,   206,   207,   207,   208,   209,   209,   210,   210,
   210,   210,   210,   211,   211,   213,   212,   214,   212,   212,
   212,   212,   216,   215,   217,   215,   215,   215,   215,   218,
   218,   220,   219,   222,   221,   223,   223,   223,   223,   223,
   224,   225,   226,   226,   227,   227,   227,   227,   227,   227,
   227,   227,   229,   228,   230,   228,   231,   231,   233,   232,
   234,   232,   235,   236,   236,   237,   237,   238,   238,   238,
   238,   238,   238,   238,   238,   239,   239,   240,   240,   241,
   241,   241,   241,   241,   241,   241,   241,   242,   242,   243,
   243,   243,   243,   243,   243,   244,   244,   244,   244,   244,
   244,   244,   244,   244,   245,   245,   246,   246,   246,   246,
   246,   246,   246,   246,   246,   246,   246,   247,   249,   248,
   250,   250,   251,   251,   252,   252,   252,   252,   253,   253,
   253,   254,   254,   254,   255,   255,   255,   255,   255,   256,
   256,   256,   257,   257,   258,   258,   259,   259,   260,   261,
   260,   262,   263,   262,   264,   265,   266,   264,   267,   267,
   267,   267,   267,   267,   267,   267,   267,   267,   267,   267,
   268,   268,   269,   269,   270,   271,   271,   271,   272,   273,
   272,   274,   272,   275,   276,   275,   278,   277,   277,   277,
   279,   280,   281,   282,   282,   283,   283,   284,   284,   284,
   285,   285,   286,   286,   286,   286,   286,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   288,   288,   288,   288,   289,   289,   289,   289,
   289,   289,   289,   289,   289,   289,   289,   289,   289,   289,
   290,   291,   291,   292,   292,   293,   293,   293,   294,   294,
   296,   297,   295,   298,   299,   295,   295,   295,   300,   301,
   295,   302,   303,   295,   295,   295,   295,   295,   304,   305,
   305,   305,   306,   306,   307,   307,   308,   308,   308,   309,
   310,   309,   309,   311,   311,   311,   312,   312,   313,   313,
   313,   313,   314,   314,   315,   315,   316,   316,   317,   317,
   318,   318,   318,   318,   319,   319,   320,   320,   321,   321,
   321,   323,   322,   324,   322,   325,   325,   326,   326,   327,
   327,   327,   328,   328,   329,   329,   329,   329,   329,   329,
   329,   329,   329,   330,   330,   330,   330,   330,   330,   330,
   330,   330,   331,   332,   333,   333,   334,   334,   334,   334,
   336,   337,   335,   339,   338,   338,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   341,
   342,   343,   344,   344,   345,   345,   345,   345,   345,   345,
   345,   345,   345,   345,   345,   346,   346,   348,   347,   349,
   347,   351,   350,   352,   350,   353,   353,   354,   355,   356,
   357,   358,   359,   360,   360,   360,   360,   360,   360,   360,
   360,   361,   362,   362,   362,   362,   363,   363,   364,   364,
   365,   365,   366,   366,   367,   367,   367,   368,   369,   370,
   369,   371,   369,   372,   373,   375,   376,   374,   377,   378,
   377,   379,   379,   379,   379,   380,   380,   381,   381,   381,
   381,   381,   381,   381,   381,   381,   382,   382,   382,   382,
   382,   382,   382,   382,   382,   382,   383,   383,   384,   384,
   384,   384,   385,   385,   385,   386,   386,   386,   387,   387,
   387,   387,   387,   388,   388,   388,   389,   389,   390,   390,
   391,   391,   392,   392,   393,   393,   394,   395,   396,   394,
   397,   397,   397,   397,   397,   397,   397,   397,   397,   397,
   397,   397,   398,   398,   399,   400,   400,   400,   401,   401,
   401,   401,   402,   402,   402,   402,   402,   402,   402,   402,
   402,   402,   403,   403,   404,   405,   405,   405,   405,   406,
   406
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     1,     1,     1,     1,     1,
     1,     8,    11,     0,     5,     1,     3,     1,     2,     1,
     6,     3,     6,     0,     6,     0,     7,     1,     6,     3,
     6,     0,     6,     0,     7,     0,     0,    10,     3,     3,
     3,     2,     1,     0,     2,     0,     2,     1,     2,     1,
     2,     1,     2,     1,     3,     2,     1,     1,     1,     1,
     1,     1,     1,     0,     2,     0,     6,     0,     6,     1,
     1,     0,     0,     5,     0,     5,     1,     1,     0,     1,
     0,     0,     3,     0,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     0,     7,     0,     8,     1,     3,     0,     3,
     0,     3,     2,     3,     2,     2,     1,     1,     1,     3,
     4,     2,     3,     3,     3,     1,     1,     1,     3,     1,
     1,     3,     4,     2,     3,     3,     3,     1,     3,     1,
     1,     1,     3,     1,     1,     1,     4,     3,     4,     6,
     5,     5,     2,     2,     1,     3,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     1,     9,     0,     3,
     4,     2,     1,     4,     1,     3,     3,     3,     1,     3,
     3,     1,     3,     3,     1,     3,     3,     3,     3,     1,
     3,     3,     1,     3,     1,     3,     1,     3,     1,     0,
     4,     1,     0,     4,     1,     0,     0,     7,     1,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     1,     3,     0,     1,     1,     1,     1,     1,     3,     0,
     9,     0,    11,     2,     0,     6,     0,     7,     4,     4,
     0,     0,     2,     1,     4,     0,     4,     1,     3,     4,
     1,     3,     1,     1,     1,     1,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     1,     1,     1,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     3,     1,     4,     1,     3,     2,     2,     2,     0,     1,
     0,     0,    11,     0,     0,    11,     6,     6,     0,     0,
    10,     0,     0,    10,     5,     5,     4,     4,     0,     1,
     1,     2,     5,     3,     2,     4,     1,     2,     3,     6,
     0,     8,     4,     1,     3,     2,     1,     4,     1,     1,
     2,     2,     1,     2,     1,     2,     1,     1,     1,     2,
     1,     2,     2,     3,     1,     3,     1,     3,     1,     1,
     3,     0,     2,     0,     4,     4,     1,     1,     2,     1,
     1,     2,     0,     1,     5,     2,     3,     3,     4,     3,
     4,     4,     5,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     2,     2,     7,     6,     2,
     0,     0,    10,     0,     6,     1,     1,     1,     1,     2,
     1,     1,     1,     1,     1,     1,     1,     3,     1,     2,
     2,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     3,     1,     1,     3,     2,     0,     5,     0,
     6,     0,     4,     0,     5,     3,     2,     3,     0,     0,
     0,     0,     0,     1,     2,     2,     3,     2,     3,     3,
     4,     2,     2,     3,     3,     4,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     4,     2,     0,
     5,     0,     6,     4,     4,     0,     0,    10,     1,     0,
     4,     1,     1,     1,     1,     1,     3,     1,     4,     3,
     4,     6,     5,     5,     2,     2,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     1,     4,     1,     3,
     3,     3,     1,     3,     3,     1,     3,     3,     1,     3,
     3,     3,     3,     1,     3,     3,     1,     3,     1,     3,
     1,     3,     1,     3,     1,     3,     1,     0,     0,     7,
     1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     1,     0,     1,     2,     7,     2,     2,     7,
     6,     2,     3,     2,     3,     2,     3,     3,     3,     3,
     2,     3,     0,     1,     1,     1,     1,     1,     1,     1,
     1
};

static const short yydefact[] = {     0,
    11,   381,   349,   227,   349,    14,     0,     0,     0,     0,
   241,   241,   254,   253,   255,   256,   257,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   304,   305,   306,   303,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   349,   349,   349,   349,   349,   349,
   349,   349,   349,   349,   619,   616,   617,   618,   620,   621,
     0,     3,     6,     7,   373,     8,     9,   349,    43,   613,
    10,   226,   228,     0,   329,   329,   349,   329,   349,   322,
   349,     0,   349,   107,   241,    20,   349,   377,   378,   379,
   382,   383,   244,   241,   241,   237,   349,   349,   349,     0,
   465,   241,   472,     0,     0,     0,   595,     0,     0,     0,
     0,   241,   505,     0,   241,   241,   241,   241,   241,   241,
   241,   241,   241,     0,    42,     0,     0,     0,     0,     0,
     0,   241,   145,   615,   141,   142,   516,   144,   146,   157,
   173,   167,   166,   175,   179,   182,   185,   190,   193,   195,
   197,   199,   202,   205,   209,   221,   507,   169,     0,     0,
   497,   455,   456,   457,   458,     0,     0,   459,   241,   460,
     0,   461,     0,   462,   464,   140,     0,   449,     0,   503,
     0,   479,   436,     0,     0,     0,   445,     0,   446,   425,
   444,   441,   442,   437,   438,   439,     0,     0,   443,     0,
     0,     0,   447,   424,     0,   258,   259,   260,   261,   266,
   268,   267,   271,   272,   283,   285,   286,   284,   269,   270,
   262,   263,   264,   265,   280,   281,   278,   282,   273,   274,
   277,   275,   276,   289,   291,   296,   279,   292,   293,   294,
   295,   287,   288,   290,   297,   298,   301,   302,   299,   300,
   307,   309,   308,   310,   311,   312,   313,   314,   315,   316,
     4,   241,     0,   109,   113,   499,   349,   349,   614,     5,
   349,   330,   326,   327,   320,   328,     0,   241,   241,   318,
   241,   241,     0,   319,   374,   317,   380,   384,   349,     0,
   243,   349,     0,   234,   241,   613,    16,    18,     0,   349,
   241,    28,   392,   241,   615,   141,   173,   225,   468,     0,
   241,   241,   241,   223,     0,   604,   606,   611,     0,     0,
   349,   398,     0,     0,   160,   165,   164,   163,   162,   161,
     0,   241,   158,   159,   241,     0,     0,     0,     0,     0,
   241,   474,   241,   467,   241,   414,   415,   416,   417,     0,
   418,   419,   241,   421,   241,   420,   422,   479,   241,   241,
   153,   154,     0,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   200,   206,   203,   506,   241,     0,   602,    39,     0,   480,
   498,   509,   599,     0,   241,   241,     0,     0,     0,   504,
    40,   426,   430,   440,   451,   452,   450,     0,     0,    41,
    22,   241,   392,   349,   241,   479,   500,   241,   229,   108,
   349,     0,   324,     0,   349,     0,   349,     0,   241,   241,
   240,   241,   239,   235,   349,     0,   241,     0,   349,   241,
    19,   389,     0,     0,   375,   390,   241,     0,     0,   241,
     0,   512,     0,   224,     0,   603,   612,   143,   241,   241,
     0,   400,   399,   401,   241,   463,   241,     0,   607,   608,
   609,   610,   605,   470,     0,     0,   598,   349,   477,   596,
     0,     0,   148,     0,   155,     0,     0,     0,   210,   211,
   212,   213,   214,   215,   216,   217,   218,   219,   220,   176,
   177,   178,   181,   180,   183,   184,   186,   187,   188,   189,
   191,   192,   194,   196,   198,   241,   241,   241,   222,   241,
   170,   493,   144,   497,     0,   349,   478,   510,     0,   466,
     0,   448,   434,     0,     0,    24,     0,   484,   241,   501,
   110,   349,   241,   349,   479,   112,   241,   230,   323,   241,
   339,     0,   347,   342,     0,   348,     0,   364,   367,   361,
   363,   245,   241,   241,   613,    15,    30,   241,   392,   241,
    17,   376,   385,   387,    36,   394,   349,   393,   397,   241,
   473,   508,     0,   514,   223,   321,   406,     0,   392,   402,
   241,     0,   174,   349,   241,     0,   241,   476,   492,     0,
   517,   241,   149,   147,   241,   241,   201,     0,   204,   241,
   172,   494,   495,   241,   241,   241,   515,   241,   241,   349,
    44,    26,   485,   488,   241,   241,   486,   241,   502,     0,
   232,   241,   325,   345,   481,   331,   346,   481,   334,   241,
   366,   241,     0,     0,   241,   241,   241,     0,    32,     0,
   241,     0,    46,   391,   241,   403,   469,   241,     0,   407,
   410,   241,     0,   408,     0,   392,     0,     0,   241,   475,
   241,   241,   156,   151,   152,   207,     0,   496,   511,     0,
   241,   241,   241,   241,   241,   241,   241,   241,   241,     0,
   141,   142,   144,   157,   173,   166,   179,   182,   185,   190,
   193,   195,   197,   199,   202,     0,   520,   519,   528,   537,
   547,   549,   553,   556,   559,   564,   567,   569,   571,   573,
   575,   577,   581,   522,   140,     0,    23,    25,    72,    44,
   489,   490,   241,   487,    21,   241,   246,   349,   337,   481,
   349,   338,   481,   360,   365,   241,     0,   238,   241,   248,
   236,   241,     0,   349,    46,    34,     0,   386,   388,    37,
    79,   395,   369,     0,   241,   403,   370,   404,   513,   431,
     0,   411,   409,   412,     0,     0,   150,   471,     0,   520,
   241,   171,   601,     0,     0,   160,   165,   164,   163,   162,
   161,   158,   159,   241,   241,   241,   153,   154,     0,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   241,   241,   241,   241,
   241,   241,   241,   241,   241,   241,   200,   578,   203,   435,
     0,   429,    66,    82,    70,    86,    87,    88,    89,    90,
    93,    94,    45,    72,    48,    71,   349,   349,    52,    27,
   491,   241,     0,   351,   349,   349,   350,   349,   349,   349,
   368,   241,   251,     0,   246,    12,    31,    33,    46,    29,
   613,    73,    84,    77,    47,    79,    50,    78,   392,   396,
   371,   372,   223,   405,   413,     0,     0,   479,   208,   600,
   143,   241,     0,   148,     0,     0,     0,     0,   582,   583,
   584,   585,   586,   587,   588,   589,   590,   591,   592,   176,
   177,   178,   181,   180,   183,   184,   186,   187,   188,   189,
   191,   192,   194,   196,   198,   574,   241,   576,   241,   428,
   349,    64,   613,    49,   103,     0,    53,   246,   241,   349,
     0,   241,   352,   340,   349,   343,   349,   362,   249,   241,
   613,    35,     0,   349,    64,   613,    51,   241,   432,   241,
   597,   594,   174,   241,   149,   147,   241,   241,     0,   521,
   349,    59,    60,    61,    62,    63,   613,    54,    64,     0,
     0,     0,   119,    83,   128,   613,     0,   118,     0,    95,
   100,    99,    98,    97,    96,   101,   102,   105,     0,   231,
   241,   354,   241,   241,   349,   357,     0,   332,     0,   335,
   250,   252,     0,    38,   613,   613,    85,   613,   117,   241,
     0,   168,   593,   480,     0,   151,   152,   579,     0,    64,
     0,    65,    58,    56,    57,     0,   122,     0,     0,     0,
     0,     0,   115,     0,     0,   131,   138,   613,   130,     0,
   241,   247,   358,   241,     0,   355,   241,   341,     0,   344,
     0,    13,    81,    81,   116,   433,   518,   150,   241,    81,
    55,    81,   123,   120,   127,   126,     0,   124,   125,   129,
   114,     0,   134,     0,     0,     0,     0,     0,   613,   233,
   349,   353,   359,   333,   336,    74,    80,    76,   580,    67,
    69,   121,   135,   132,     0,   136,   137,   139,    92,   241,
     0,   356,   133,   104,    91,   241,   106,     0,     0,     0
};

static const short yydefgoto[] = {  1148,
    81,    82,    83,    84,   119,   316,   317,    85,   651,   760,
   318,   785,   899,    86,   683,   901,   884,    88,   758,   759,
   790,   791,   873,   905,   874,  1007,  1008,  1064,  1009,  1010,
   875,   961,   962,   907,   984,   985,  1126,  1127,   963,   908,
   986,   877,  1146,  1140,   878,  1028,   879,  1019,  1080,    89,
   285,   444,   446,    90,  1014,  1047,  1015,  1107,  1016,  1077,
  1078,   159,   160,   514,   161,   162,   163,   416,   551,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   546,
   174,   548,   175,   547,   811,   176,   204,   485,   329,   286,
    92,   662,   766,   113,   594,    93,   312,   178,   283,   114,
   115,   883,   781,   894,    95,    96,    97,    98,   342,   287,
   452,   100,   293,   101,   770,  1089,   773,  1091,   665,  1037,
   668,  1039,   102,   886,   887,  1034,  1035,   103,   673,   587,
   588,   795,   117,   474,   110,   111,   105,   602,   603,   475,
   476,   477,   685,   608,   343,   801,   797,   494,   364,   205,
   225,   206,   207,   365,   913,  1051,   209,   648,   210,   211,
   212,   213,   180,   421,   366,   367,   479,   626,   368,   330,
   505,   369,   185,   370,   557,   768,   974,   218,   571,   509,
   420,   187,   572,   573,   371,   188,   189,   372,   645,   613,
   373,   221,   374,   378,   702,   737,   861,   738,   739,   740,
   741,   742,   743,   744,   745,   746,   747,   748,   749,   750,
   751,   752,   753,   957,  1099,   754,  1054,   375,   376,   194,
   377,   290,   196,   197,   107
};

static const short yypact[] = {  1812,
-32768,   148,  5048,-32768,  6116,-32768,   432,  2708,  3070,  3070,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1993,-32768,-32768,-32768,   236,-32768,-32768,  4898,-32768,    67,
-32768,-32768,-32768,    71,  5848,  5848,-32768,  5848,    89,   104,
-32768,  1025,-32768,-32768,   432,-32768,-32768,-32768,-32768,-32768,
   148,-32768,-32768,   178,-32768,    89,-32768,-32768,  5048,   183,
-32768,  5313,-32768,   221,   281,   290,-32768,   299,   432,   177,
   311,   755,-32768,  2348,  5313,  5313,  5313,  5313,  5313,  5313,
-32768,  5338,  5338,   362,-32768,   376,   388,   416,   422,   434,
   171,  4350,-32768,   436,   444,-32768,   464,-32768,-32768,   734,
   844,-32768,-32768,-32768,  1072,   197,   248,   637,   315,   472,
   470,   481,   483,   210,-32768,-32768,   132,-32768,  3112,   459,
   485,-32768,-32768,-32768,-32768,   525,  2750,-32768,  4350,-32768,
  3112,-32768,  3112,-32768,-32768,-32768,   539,-32768,   566,-32768,
  2528,   464,   562,   405,   517,  2889,-32768,  3070,-32768,-32768,
-32768,  5610,-32768,-32768,-32768,-32768,   597,   621,-32768,  3070,
  3070,  3112,-32768,-32768,   558,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   629,   640,-32768,-32768,-32768,    89,  4743,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   665,   381,-32768,-32768,
   432,   432,   223,-32768,   236,-32768,-32768,-32768,-32768,   671,
-32768,-32768,   700,   701,   381,    67,-32768,   656,   703,-32768,
   432,-32768,   169,  5313,-32768,-32768,-32768,-32768,-32768,   712,
  5313,  5313,  5313,  5200,   719,-32768,-32768,-32768,   453,   506,
  5480,   491,   720,   726,-32768,-32768,-32768,-32768,-32768,-32768,
   735,  5313,-32768,-32768,  5313,   753,   786,   791,   794,   797,
  5313,-32768,  1381,-32768,  4350,-32768,-32768,-32768,-32768,   810,
-32768,-32768,  4350,-32768,  4350,-32768,-32768,-32768,  5219,  5313,
-32768,-32768,   112,  5313,  5313,  5313,  5313,  5313,  5313,  5313,
  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,
  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,
-32768,-32768,-32768,-32768,  5313,   776,-32768,-32768,  2168,-32768,
-32768,   831,-32768,   852,  4350,  5313,   603,   833,   853,-32768,
-32768,-32768,-32768,  5610,-32768,-32768,-32768,  1684,   861,-32768,
-32768,  5313,   253,  3249,   381,   862,-32768,   381,-32768,   530,
  6116,   808,   905,   908,   915,   917,   915,   432,   926,   381,
-32768,   381,-32768,-32768,-32768,   877,   919,   924,-32768,   381,
   656,-32768,   432,   946,-32768,   952,   432,   393,   954,  4350,
   642,   963,   648,   963,   968,-32768,-32768,-32768,-32768,  5244,
   967,   686,-32768,   691,  5313,-32768,-32768,   971,-32768,-32768,
-32768,-32768,-32768,-32768,   989,   976,-32768,  3249,-32768,-32768,
  1008,  1009,-32768,   670,-32768,   115,   432,   432,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,  1072,  1072,   197,   197,   248,   248,   248,   248,
   637,   637,   315,   472,   470,  5313,  5313,  5313,-32768,  5381,
-32768,-32768,  5956,-32768,  2931,  3424,-32768,-32768,  1012,-32768,
   727,-32768,-32768,  1028,   998,-32768,  1013,-32768,  3774,-32768,
-32768,  3599,  3816,-32768,   862,-32768,-32768,  1049,-32768,-32768,
  1035,  1052,-32768,  1062,  1064,-32768,   358,-32768,  1067,-32768,
-32768,-32768,   178,-32768,   327,-32768,-32768,  5313,   259,   381,
-32768,-32768,  1077,-32768,-32768,  1080,  6116,-32768,-32768,  4350,
-32768,-32768,  1079,-32768,  5200,-32768,-32768,  1070,   704,   691,
  5269,  1088,-32768,-32768,-32768,  1095,  4350,-32768,-32768,  1098,
-32768,  5313,-32768,-32768,-32768,-32768,   481,   451,   483,  5313,
-32768,-32768,-32768,  3952,  4350,  5313,-32768,  5406,  5313,-32768,
-32768,-32768,-32768,-32768,  3994,  4130,-32768,  4172,-32768,  1101,
-32768,-32768,-32768,-32768,-32768,  1081,-32768,-32768,  1082,-32768,
   432,-32768,   432,  1109,  4770,-32768,-32768,  1102,-32768,  1103,
-32768,   305,-32768,-32768,   432,   548,-32768,  4350,  1112,-32768,
-32768,   103,  1106,-32768,  1107,   107,  1114,  1108,  4350,-32768,
  5313,  5406,-32768,-32768,-32768,-32768,  1116,-32768,-32768,   740,
  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5338,  5338,  1119,
   747,   772,   778,   847,  1282,   806,  1075,   668,   799,   795,
   730,  1110,  1105,  1111,  1091,   275,  1125,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   809,   814,-32768,-32768,  1076,-32768,
-32768,-32768,  4308,-32768,-32768,-32768,-32768,  6042,-32768,-32768,
  6042,-32768,-32768,-32768,-32768,  5313,   840,-32768,  4770,-32768,
-32768,  4770,  1074,-32768,-32768,-32768,  1137,-32768,-32768,-32768,
  1142,-32768,   236,  1140,-32768,   325,-32768,   691,-32768,-32768,
  1157,-32768,-32768,-32768,  1160,   432,-32768,-32768,   817,  1161,
  5313,-32768,  1147,   845,  1162,   857,   858,   859,   866,   912,
   935,   937,   938,  5313,  5294,  5313,   960,   962,   117,  5313,
  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,
  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,  5313,
  5313,  5313,  5313,  5313,  5313,  5313,  5313,-32768,  5313,-32768,
  1168,  1173,    95,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1043,-32768,-32768,-32768,-32768,   997,-32768,
-32768,  4770,   477,-32768,    89,  4972,-32768,  6042,  4972,  6042,
-32768,-32768,-32768,   848,-32768,-32768,-32768,-32768,-32768,-32768,
    67,   105,-32768,-32768,-32768,  1048,-32768,-32768,   266,-32768,
-32768,-32768,  5200,-32768,-32768,  1167,  1175,   862,-32768,-32768,
   979,  5313,  1174,   982,   987,   191,   432,   432,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   999,
  1001,  1014,   907,  1007,   443,   594,    76,   521,   617,   742,
   609,   669,   570,   749,   313,   481,  5313,   483,  5406,-32768,
  5740,   502,   120,-32768,-32768,   674,-32768,-32768,-32768,-32768,
  1178,    62,-32768,-32768,  4972,-32768,  4972,-32768,-32768,   920,
   542,-32768,  1113,  5740,   502,   120,-32768,    57,-32768,-32768,
-32768,  1019,  1023,-32768,  1024,  1026,-32768,-32768,   867,-32768,
  4586,-32768,-32768,-32768,-32768,-32768,   550,-32768,   502,   723,
    74,    74,-32768,-32768,   382,   560,  1117,-32768,    93,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   571,-32768,
   381,-32768,  5313,  1177,-32768,  1179,  1183,-32768,  1185,-32768,
-32768,-32768,  1120,-32768,  4430,   550,-32768,   560,-32768,   310,
  1181,-32768,-32768,-32768,  1184,  1032,  1039,-32768,  1121,   502,
  1123,-32768,-32768,-32768,-32768,   283,   382,   186,   432,   432,
    74,  1139,-32768,    93,    93,-32768,   396,   580,-32768,    93,
-32768,-32768,-32768,    62,  1217,-32768,  5313,-32768,  1216,-32768,
  1218,-32768,  1165,  1165,-32768,-32768,-32768,  1041,  5313,  1165,
-32768,  1165,-32768,-32768,-32768,   382,  1213,-32768,-32768,   382,
-32768,   486,   396,   331,   432,   432,    93,  1154,   580,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,  1215,-32768,-32768,   396,-32768,-32768,
  1156,-32768,-32768,-32768,-32768,-32768,-32768,  1244,  1245,-32768
};

static const short yypgoto[] = {-32768,
-32768,  1169,-32768,-32768,-32768,-32768,  -453,  -103,-32768,-32768,
   925,-32768,-32768,-32768,-32768,-32768,    80,-32768,   488,-32768,
  -707,-32768,-32768,-32768,  -703,   267,   196,-32768,-32768,   245,
   384,-32768,-32768,   353,-32768,-32768,  -648,  -689,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -860,   146,   277,  -858,
   184,-32768,  -602,   442,   515,-32768,  -556,-32768,-32768,   137,
  -326,  -311,  -246,  -330,  -363,  -362,  -395,  -530,  -469,-32768,
  -554,-32768,   -78,-32768,-32768,   787,   836,  -607,  -355,     1,
-32768,-32768,-32768,  -456,-32768,-32768,-32768,     0,  -244,   811,
-32768,  -782,  -676,-32768,-32768,-32768,-32768,-32768,-32768,   128,
   690,-32768,   644,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    97,  -669,  -512,-32768,   188,-32768,-32768,   601,
   607,   487,     5,  -374,  1176,-32768,    11,-32768,-32768,  -553,
-32768,-32768,-32768,   600,  -292,   947,-32768,  -483,  1022,  1278,
-32768,  1069,-32768,  1060,-32768,-32768,-32768,-32768,   -97,-32768,
-32768,-32768,-32768,   317,  1078,  1115,-32768,-32768,  1267,-32768,
-32768,  -353,-32768,   635,   238,  -529,  -714,-32768,   785,-32768,
-32768,   876,   -23,  -446,   111,-32768,   174,    59,-32768,-32768,
   194,-32768,   220,-32768,-32768,   595,-32768,   337,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1321,-32768,-32768,
  1367,  -302,  -255,    68,-32768
};


#define	YYLAST		6296


static const short yytable[] = {    94,
    91,   305,    94,   592,   104,   504,   453,   689,   620,   506,
   226,   227,   112,   466,   545,   637,   601,   228,   229,   230,
   231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
   241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
   251,   252,   253,   328,   543,   724,   544,   254,   255,   256,
   257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
   267,   268,   269,   270,   288,   693,   190,   106,   567,   876,
   106,   533,   534,   468,   120,   541,   542,   898,   639,    87,
    94,    91,   490,  1033,   289,   104,   565,   906,   535,   536,
     2,   726,   576,   736,   291,     2,  -560,  1011,   297,   724,
  -560,   889,   893,   428,    94,   895,  -241,  1012,   432,   644,
   433,   472,   981,   310,   311,   313,  1074,   734,   319,   219,
   219,   308,   437,   400,   401,   656,  1075,    99,   490,   321,
   116,   804,   118,   341,   618,   415,     2,   289,   771,   517,
   351,   634,   805,  1011,   927,   726,   681,   736,   106,   414,
  1066,  1067,   415,  1012,   518,   537,   538,   539,   540,   928,
    87,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   734,   106,   472,   976,   967,   361,   362,   735,   -68,
   -68,     2,   220,   220,   876,  1029,   322,   299,   434,   -75,
   -75,   982,   190,   295,   336,   298,   335,   300,   309,   304,
   341,   191,   798,   306,   624,   968,   323,  1106,    99,  1011,
  1110,   415,  1104,   314,   315,  1112,  1113,   996,   975,  1012,
   977,   506,   292,   292,   680,   292,   468,   192,   398,   399,
    75,    76,   735,    77,    78,    75,    76,   190,    77,    78,
   888,   458,   678,   890,   331,   190,   320,   325,  1013,   190,
   412,   190,   733,  1106,   108,   109,   383,   472,  1138,  -242,
  1038,   282,  1040,   472,   413,   695,   325,  1076,   -68,   -68,
   472,   345,   346,   347,   348,   349,   350,   566,   -75,   -75,
   190,   442,   328,   679,   731,   732,   297,   453,   447,  -349,
   691,  -349,   677,   325,  1013,   400,   401,    94,   451,  -349,
   454,   456,   450,  1042,   332,   989,   733,  1103,  1068,   788,
  1069,   219,   798,   333,    94,   858,   219,   730,   219,   465,
   319,   727,   334,   341,   181,  1070,   956,   191,   337,   859,
   219,   219,   698,  -572,  -400,   490,   728,  -572,   731,   732,
   432,   491,  -349,  -349,   289,  -349,  -349,   707,  -241,   676,
   490,   409,   492,   192,  1011,   693,   724,  1134,     2,   325,
  1013,  1105,   341,   328,  1012,   106,   406,   407,   455,   457,
   459,   730,   191,   973,   220,   727,   973,   670,   671,   220,
   191,   220,   106,   445,   191,   355,   191,   448,   322,   958,
   728,   356,   755,   220,   220,   556,    75,    76,   192,    77,
    78,   729,   726,   357,   736,   460,   192,  1068,   462,  1069,
   192,   328,   192,   415,     2,   191,   470,   488,   815,   473,
   891,  1114,   430,  1115,  1070,   415,  -349,  -349,   734,  -349,
  -349,   358,  -349,  -349,   447,  -349,  -349,   359,  1116,  -349,
  -349,   192,  -349,  -349,    94,  1128,   755,    94,   360,   574,
   344,  1130,   577,  1131,   582,   729,   585,  -619,   591,    94,
   955,    94,   973,  -557,   973,  -616,   598,  -557,   489,   319,
   487,   415,   706,   415,   398,   399,   607,   190,    75,    76,
   321,    77,    78,    75,    76,  -617,    77,    78,   616,   735,
   953,   491,   954,   622,   969,   417,   451,   970,    75,    76,
   408,    77,    78,   911,   325,  1013,  1105,   423,   409,   424,
  1133,  1114,   106,  1115,  -241,   106,   490,   943,   944,   328,
   410,   951,   952,   414,     2,   589,   415,   106,  1116,   106,
   488,   530,   531,   532,   945,   946,   411,   322,   439,   473,
   604,  -561,   328,   419,   609,  -561,   578,  -349,   219,   418,
  -349,   583,  -349,   586,    75,    76,   447,    77,    78,   289,
   425,   595,   970,   733,   992,   600,   620,   289,   400,   401,
  1060,  -241,   447,   490,  1082,  -453,   660,   289,   489,   451,
  1071,     2,   793,  -618,   635,   636,  1002,  1003,  1081,   426,
  -568,   970,   674,   675,  -568,   731,   732,   289,   983,   319,
  1117,   947,   948,   949,   950,    75,    76,   431,    77,    78,
   321,   220,   191,   190,  -558,   435,  1004,  1005,  -558,   622,
   430,   406,   407,   415,   451,   398,   399,   488,   730,  -565,
  1006,   623,   727,  -565,   704,   705,   327,  -562,   192,   341,
   436,  -562,   186,   217,   217,   402,   403,   728,   440,   327,
   327,   327,   327,   327,   327,   441,   353,   354,   404,   405,
  1017,   767,   415,   443,   400,   401,   612,   322,   415,   774,
   578,   776,   614,   402,   403,   782,   783,  1083,  1043,  -242,
   787,   467,   449,  1049,   607,   794,   404,   405,   461,  -566,
   632,   491,   793,  -566,   633,   473,   796,   328,  1059,   844,
   845,  1055,   492,   755,  1061,   402,   403,  1018,   472,  -241,
   341,   490,   729,  1072,  -241,   692,   621,   463,   404,   405,
   697,    75,    76,   464,    77,    78,   469,  -349,   691,  -349,
  1018,  1123,   919,   480,   686,   554,   486,  -349,   589,   294,
   589,   296,  1093,  1094,   495,  1095,   757,   415,   191,   789,
   496,   647,   609,   106,  1065,  1018,  1018,   379,   497,   380,
   415,  -349,  -563,  1079,   813,   882,  -563,  -525,   186,  -570,
   499,  -525,   338,  -570,   192,  1118,  -349,   408,   324,   381,
   382,   852,   853,   135,   136,   137,   138,   139,   140,   400,
   401,  1020,  -526,  1021,   910,   794,  -526,   622,  -524,   141,
   142,   143,  -524,   500,  1022,  1023,   796,  1024,   501,  1025,
  1026,   502,  1018,   186,   503,  1018,  1141,   550,  1079,  1079,
   829,   186,  1027,   144,  1079,   186,  -546,   186,   508,  -523,
  -546,   848,   849,  -523,   415,   217,   429,   415,   862,   558,
   217,   917,   217,   177,   850,   851,   846,   847,   816,   817,
   818,   819,   820,   821,   217,   217,   186,   562,  1018,   892,
   671,  1079,   559,   106,   153,   415,   384,   979,   980,   921,
   825,   564,   826,   916,  -349,   327,   563,  -540,  -545,  -544,
   897,  -540,  -545,  -544,   971,   575,  -543,   415,  1058,  -349,
  -543,   978,   827,   828,   579,   885,   325,  1063,   885,   385,
   386,   387,   388,   389,   390,   391,   392,   393,   394,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   580,   581,  -555,   325,   326,
   156,  -555,  -542,  -241,   158,   584,  -542,  1001,   779,  1041,
   395,   396,   397,   324,   590,   597,   305,   599,   135,   136,
   137,   138,   139,   140,   328,  -541,   327,  -538,  -539,  -541,
  1045,  -538,  -539,   596,   141,   142,   143,   339,  1030,   340,
   605,    94,   606,   965,   966,   610,  1036,   940,   941,   942,
  -535,   972,  -536,   415,  -535,   615,  -536,   794,   144,  1052,
   619,   625,   577,   451,   997,   998,  1056,  1057,  1050,  -527,
   628,   447,  -530,  -527,   327,   988,  -530,   632,   328,   327,
   627,   995,   512,   885,   177,   885,   885,   885,   630,  -550,
  1129,  -551,   177,  -550,   650,  -551,   177,  -554,   177,   153,
    94,  -554,   631,  1085,  -552,   646,   427,   652,  -552,   106,
   395,   396,   397,  -548,  -531,   447,  -529,  -548,  -531,   794,
  -529,   649,  -533,   186,   664,   106,  -533,   177,   993,  -534,
   327,  -532,   327,  -534,   641,  -532,  1031,   179,   208,   208,
   666,   661,   217,   866,   867,   868,   869,   870,   871,   872,
  1120,   667,   669,    94,   684,   182,   214,   214,  1036,   672,
   301,   302,   303,   325,   326,   156,   690,   682,   106,   158,
   769,   772,   885,   688,   885,   395,   396,   397,   841,   842,
   843,   696,   327,   863,   864,   865,   699,   106,   902,   903,
   904,   701,   183,   215,   215,   765,   778,   786,   784,   800,
   802,  1086,   807,   803,   806,   327,  1108,  1109,   854,  1144,
   812,   498,   824,   855,   857,  1147,   863,   864,   865,   860,
   856,   106,   866,   867,   868,   869,   870,   871,   872,   478,
   896,   900,   725,   909,   920,   515,   481,   482,   483,   484,
   519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
   529,   914,  1136,  1137,   915,   918,   922,   478,   959,   186,
   960,   990,   991,   179,   994,  1032,  1053,  1084,   478,  1044,
  1087,   549,  1088,  1073,  1090,  1096,  1092,  1100,  1098,  1102,
   422,   182,   902,   903,   904,   516,   725,  1142,   866,   867,
   868,   869,   870,   871,   872,  1111,   327,   327,   327,   327,
   327,   327,   822,   823,  1122,  1124,   864,  1125,   179,  1132,
  1139,  1143,  1145,  1149,  1150,   471,   179,   880,   183,   281,
   179,  1046,   179,  1062,   177,  1101,   182,   964,   987,  1135,
   208,   561,  1048,  1119,   182,   208,   925,   208,   182,   663,
   182,  1121,   593,   777,   184,   216,   216,   775,   214,   208,
   208,   179,   912,   214,   792,   214,   307,   224,   493,   438,
   327,  1097,   629,   183,   555,  1000,   810,   214,   214,   182,
     0,   183,     0,     0,   830,   183,     0,   183,     0,     0,
     0,     0,     0,     0,     0,   215,     0,     0,     0,     0,
   215,     0,   215,     0,     0,   327,     0,     0,   193,   222,
   222,     0,     0,     0,   215,   215,   183,   831,   832,   833,
   834,   835,   836,   837,   838,   839,   840,     0,     0,     0,
     0,     0,     0,     0,     0,   327,   327,   327,   327,   327,
   327,   327,   327,   327,   327,   327,   327,   327,   327,   327,
   327,   327,     0,   327,   195,   223,   223,     0,     0,     0,
     0,     0,   638,     0,     0,     0,   507,     0,     0,     0,
   177,     0,     0,     0,   510,     0,   511,     0,     0,  -479,
   184,     0,     0,     0,   363,     0,     0,     0,     0,   135,
   136,   137,   138,   139,   140,     0,     0,     0,   703,     0,
     0,     0,     0,     0,     0,   141,   142,   143,     0,     0,
     0,     0,     0,     0,     0,     0,   327,     0,     0,     0,
     0,     0,     0,     0,     0,   184,   560,     0,     0,   144,
   484,     0,     0,   184,   193,     0,     0,   184,     0,   184,
     0,   780,     0,     0,     0,   570,     0,   216,     0,     0,
     0,     0,   216,   725,   216,   478,     0,     0,   179,     0,
     0,   710,     0,     0,   756,     0,   216,   216,   184,     0,
   153,     0,     0,     0,     0,     0,   182,   208,     0,   193,
   195,   611,     0,     0,     0,     0,     0,   193,     0,     0,
     0,   193,     0,   193,     0,   214,     0,     0,     0,     0,
     0,   222,     0,     0,     0,     0,   222,     0,   222,   570,
     0,     0,     0,   183,     0,     0,   809,     0,     0,     0,
   222,   222,   193,     0,     0,   195,   814,   327,     0,     0,
     0,     0,   215,   195,   325,   326,   156,   195,     0,   195,
   158,     0,     0,     0,     0,   780,     0,   223,   780,     0,
     0,     0,   223,     0,   223,     0,     0,   570,     0,     0,
     0,     0,     0,     0,     0,     0,   223,   223,   195,     0,
     0,     0,     0,   570,   659,     0,     0,     0,     0,     0,
     0,   327,     0,     0,     0,     0,     0,     0,     0,     0,
   923,   515,     0,   327,   179,     0,   929,   930,   931,   932,
   933,   934,   935,   936,   937,   938,   939,     0,     0,     0,
     0,   687,   182,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   700,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   926,     0,     0,     0,   659,   709,     0,   780,   183,
     0,     0,     0,     0,     0,     0,     0,   659,     0,     0,
     0,     0,     0,     0,   198,   184,     0,     0,     0,   122,
   123,   124,     0,     0,   199,   127,   128,   129,   130,   131,
   132,   200,  -427,  -427,   216,     0,     0,   201,  -427,   799,
     0,     0,   135,   136,   137,   138,   139,   140,     0,     0,
   808,     0,     0,     0,     0,  -241,     0,     0,   141,   142,
   143,     0,     0,     0,     0,     0,     0,     0,     0,   193,
     0,     0,     0,     0,     0,     0,     0,     0,   484,     0,
     0,     0,   144,     0,     0,     0,     0,     0,   222,     0,
     0,     0,     0,     0,     0,     0,   780,     0,     0,     0,
     0,     0,     0,     0,  -427,   146,   147,   148,   149,   150,
   151,     0,     0,     0,     0,   195,     0,     0,     0,   152,
     0,     0,   999,   153,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   223,     0,     0,     0,     0,     0,
     0,    -1,     1,     0,     0,     0,     0,     0,     0,     0,
     0,   184,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -241,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     2,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     3,     0,   154,   155,   156,
   202,   203,     0,   158,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   193,     0,  -349,  -349,  -349,
     0,     4,     0,     0,     0,     5,     6,     7,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     8,
     9,    10,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    13,   195,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,     0,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,    75,    76,     0,    77,    78,
    79,    80,    -2,     1,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,  -241,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     2,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     3,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,  -349,  -349,
  -349,     0,     4,     0,     0,     0,     5,     6,     7,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     8,     9,    10,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
    12,    13,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,     0,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,     0,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,    75,    76,   121,    77,
    78,    79,    80,   122,   123,   124,     0,   125,   126,   127,
   128,   129,   130,   131,   132,   133,  -479,   552,     0,     0,
     0,   134,     0,     0,     0,     0,   135,   136,   137,   138,
   139,   140,     0,     0,     0,     0,     0,     0,     0,  -241,
     0,     3,   141,   142,   143,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -349,  -349,  -349,   144,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
   147,   148,   149,   150,   151,     0,     0,     0,     0,     0,
     0,     0,     0,   152,    11,    12,    13,   153,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,     0,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,   154,   155,   156,   157,    78,    79,   553,   121,     0,
     0,     0,     0,   122,   123,   124,     0,   125,   126,   127,
   128,   129,   130,   131,   132,   133,  -479,     0,     0,     0,
     0,   134,     0,     0,     0,     0,   135,   136,   137,   138,
   139,   140,     0,     0,     0,     0,     0,     0,     0,  -241,
     0,     0,   141,   142,   143,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -241,  -241,  -241,   144,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
   147,   148,   149,   150,   151,     0,     0,     0,     0,     0,
     0,     0,     0,   152,  -241,  -241,  -241,   153,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,     0,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,     0,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,   154,   155,   156,   157,    78,  -241,   158,   198,     0,
     0,     0,     0,   122,   123,   124,     0,     0,   199,   127,
   128,   129,   130,   131,   132,   200,  -479,  -483,     0,     0,
     0,   201,     0,     0,     0,     0,   135,   136,   137,   138,
   139,   140,     0,     0,     0,     0,     0,     0,     0,  -241,
     0,     0,   141,   142,   143,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,  -241,  -241,  -241,   144,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   146,
   147,   148,   149,   150,   151,     0,     0,     0,     0,     0,
     0,     0,     0,   152,  -241,  -241,  -241,   153,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,     0,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,     0,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,  -241,
  -241,   154,   155,   156,   202,   203,  -241,   158,   121,     0,
     0,     0,     0,   122,   123,   124,     0,   125,   126,   127,
   128,   129,   130,   131,   132,   133,  -479,     0,     0,     0,
     0,   134,     0,     0,     0,     0,   135,   136,   137,   138,
   139,   140,     0,     0,     0,     0,     0,     0,     0,  -241,
   121,     0,   141,   142,   143,   122,   123,   124,     0,   125,
   126,   127,   128,   129,   130,   131,   132,   133,  -479,     0,
     0,     0,     0,   134,     0,     0,   144,     0,   135,   136,
   137,   138,   139,   140,     0,     0,     0,     0,     0,     0,
     0,  -241,     0,     0,   141,   142,   143,     0,   145,   146,
   147,   148,   149,   150,   151,     0,     0,     0,     0,     0,
     0,     0,     0,   152,     0,     0,     0,   153,   144,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
  -454,   146,   147,   148,   149,   150,   151,     0,     0,     0,
     0,     0,     0,     0,     0,   152,     0,     0,     0,   153,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   154,   155,   156,   157,    78,     0,   158,     0,   198,
     0,     0,     0,     0,   122,   123,   124,     0,     0,   199,
   127,   128,   129,   130,   131,   132,   200,  -479,  -483,     0,
     0,     0,   201,     0,     0,     0,     0,   135,   136,   137,
   138,   139,   140,   154,   155,   156,   157,    78,     0,   158,
  -241,   121,     0,   141,   142,   143,   122,   123,   124,     0,
   125,   126,   127,   128,   129,   130,   131,   132,   133,  -479,
   642,     0,     0,     0,   134,     0,     0,   144,     0,   135,
   136,   137,   138,   139,   140,     0,     0,     0,     0,     0,
     0,     0,  -241,     0,     0,   141,   142,   143,     0,  -423,
   146,   147,   148,   149,   150,   151,     0,     0,     0,     0,
     0,     0,     0,     0,   152,     0,     0,     0,   153,   144,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   146,   147,   148,   149,   150,   151,     0,     0,
     0,     0,     0,     0,     0,     0,   152,     0,     0,     0,
   153,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   154,   155,   156,   202,   203,     0,   158,     0,
   198,     0,     0,     0,     0,   122,   123,   124,     0,     0,
   199,   127,   128,   129,   130,   131,   132,   200,  -479,  -483,
     0,     0,     0,   201,     0,     0,     0,     0,   135,   136,
   137,   138,   139,   140,   154,   155,   156,   157,    78,     0,
   158,  -241,   121,     0,   141,   142,   143,   122,   123,   124,
     0,   125,   126,   127,   128,   129,   130,   131,   132,   133,
  -479,     0,     0,     0,     0,   134,     0,     0,   144,     0,
   135,   136,   137,   138,   139,   140,     0,     0,     0,     0,
     0,     0,     0,  -241,     0,     0,   141,   142,   143,     0,
     0,   146,   147,   148,   149,   150,   151,     0,     0,     0,
     0,     0,     0,     0,     0,   152,     0,     0,     0,   153,
   144,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
     0,     0,     0,     0,     0,     0,     0,   152,     0,     0,
     0,   153,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   154,   155,   156,   202,   203,     0,   158,
     0,     0,     0,     0,   122,   123,   124,     0,   125,   126,
   127,   128,   129,   130,   131,   132,   200,  -479,   568,     0,
     0,     0,   363,     0,     0,     0,     0,   135,   136,   137,
   138,   139,   140,     0,     0,   154,   155,   156,   157,    78,
  -241,   158,     3,   141,   142,   143,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   144,     4,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   146,   147,   148,   149,   150,   151,     0,     0,     0,     0,
     0,     0,     0,     0,   569,    11,    12,    13,   153,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,     0,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,   154,   155,   156,   157,    78,    79,   553,   122,
   123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
   132,   200,  -479,   643,     0,     0,     0,   363,     0,     0,
     0,     0,   135,   136,   137,   138,   139,   140,     0,     0,
     0,     0,     0,     0,     0,  -241,     0,     3,   141,   142,
   143,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   144,     4,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   146,   147,   148,   149,   150,
   151,     0,     0,     0,     0,     0,     0,     0,     0,   152,
    11,    12,    13,   153,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,     0,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
     0,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,    73,    74,   154,   155,   156,
   157,    78,    79,   553,   122,   123,   124,     0,   125,   126,
   127,   128,   129,   130,   131,   132,   200,  -479,   654,     0,
     0,     0,   363,     0,     0,     0,     0,   135,   136,   137,
   138,   139,   140,     0,     0,     0,     0,     0,     0,     0,
  -241,     0,     3,   141,   142,   143,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   144,     4,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   146,   147,   148,   149,   150,   151,     0,     0,     0,     0,
     0,     0,     0,     0,   655,    11,    12,    13,   153,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,     0,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,     0,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
    73,    74,   154,   155,   156,   157,    78,    79,   553,   122,
   123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
   132,   200,  -479,   653,     0,     0,     0,   363,     0,     0,
     0,     0,   135,   136,   137,   138,   139,   140,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   141,   142,
   143,   122,   123,   124,     0,   125,   126,   127,   128,   129,
   130,   131,   132,   200,  -479,   657,     0,     0,     0,   363,
     0,     0,   144,     0,   135,   136,   137,   138,   139,   140,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   141,   142,   143,     0,     0,   146,   147,   148,   149,   150,
   151,     0,     0,     0,     0,     0,     0,     0,     0,   152,
     0,     0,     0,   153,   144,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   146,   147,   148,
   149,   150,   151,     0,     0,     0,     0,     0,     0,     0,
     0,   658,     0,     0,     0,   153,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
   157,    78,     0,   158,     0,     0,     0,   122,   123,   124,
     0,   125,   126,   127,   128,   129,   130,   131,   132,   200,
  -479,   708,     0,     0,     0,   363,     0,     0,     0,     0,
   135,   136,   137,   138,   139,   140,     0,     0,     0,   154,
   155,   156,   157,    78,     0,   158,   141,   142,   143,   122,
   123,   124,     0,   125,   126,   127,   128,   129,   130,   131,
   132,   200,  -479,   761,     0,     0,     0,   363,     0,     0,
   144,     0,   135,   136,   137,   138,   139,   140,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   141,   142,
   143,     0,     0,   146,   147,   148,   149,   150,   151,     0,
     0,     0,     0,     0,     0,     0,     0,   152,     0,     0,
     0,   153,   144,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   146,   147,   148,   149,   150,
   151,     0,     0,     0,     0,     0,     0,     0,     0,   152,
     0,     0,     0,   153,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   154,   155,   156,   157,    78,
     0,   158,     0,     0,     0,   122,   123,   124,     0,   125,
   126,   127,   128,   129,   130,   131,   132,   200,  -479,   762,
     0,     0,     0,   363,     0,     0,     0,     0,   135,   136,
   137,   138,   139,   140,     0,     0,     0,   154,   155,   156,
   157,    78,     0,   158,   141,   142,   143,   122,   123,   124,
     0,   125,   126,   127,   128,   129,   130,   131,   132,   200,
  -479,   764,     0,     0,     0,   363,     0,     0,   144,     0,
   135,   136,   137,   138,   139,   140,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   141,   142,   143,     0,
     0,   146,   147,   148,   149,   150,   151,     0,     0,     0,
     0,     0,     0,     0,     0,   763,     0,     0,     0,   153,
   144,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   146,   147,   148,   149,   150,   151,     0,
     0,     0,     0,     0,     0,     0,     0,   152,     0,     0,
     0,   153,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   154,   155,   156,   157,    78,     0,   158,
     0,     0,     0,   122,   123,   124,     0,   125,   126,   127,
   128,   129,   130,   131,   132,   200,  -479,   881,     0,     0,
     0,   363,     0,     0,     0,     0,   135,   136,   137,   138,
   139,   140,     0,     0,     0,   154,   155,   156,   157,    78,
     0,   158,   141,   142,   143,   122,   123,   124,     0,   125,
   126,   127,   128,   129,   130,   131,   132,   200,  -479,     0,
     0,     0,     0,   363,     0,     0,   144,     0,   135,   136,
   137,   138,   139,   140,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   141,   142,   143,     0,     0,   146,
   147,   148,   149,   150,   151,     0,     0,     0,     0,     0,
     0,     0,     0,   152,     0,     0,     0,   153,   144,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   146,   147,   148,   149,   150,   151,   289,     0,     0,
     0,     0,     0,     0,     0,   152,     0,     0,     0,   153,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     3,     0,     0,     0,     0,     0,     0,
     0,   154,   155,   156,   157,    78,     0,   158,     0,     0,
     0,     0,     0,     0,     0,  -349,  -349,  -349,     0,     4,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   154,   155,   156,   157,    78,     0,   158,
     0,     0,     0,     0,     0,     0,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,     0,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,   289,     0,     0,     0,     0,    79,    80,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     3,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     4,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  -613,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,     0,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,     0,
     0,  -111,     0,     0,    79,    80,  -111,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     3,     0,   779,     0,
     0,     0,     0,   324,     0,     0,     0,     0,   135,   136,
   137,   138,   139,   140,     0,     0,     0,     0,     0,     0,
     0,     0,     4,     0,   141,   142,   143,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   144,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
    12,    13,     0,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,     0,    24,    25,    26,    27,    28,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,   153,
    39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    73,    74,   284,     0,     0,     0,
     0,    79,    80,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     3,     0,   325,   326,   156,     0,     0,     0,   158,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     4,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,  -482,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    11,    12,    13,     0,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,     0,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,  -241,     0,     0,     0,     0,    79,    80,    11,    12,
    13,     2,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,     0,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,     0,     0,     0,     0,     0,
    79,    80,     0,     0,    11,    12,    13,     0,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,     0,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,   324,    77,    78,    79,    80,   135,   136,
   137,   138,   139,   140,     0,     0,     0,     0,     0,     0,
     0,  -241,   324,   513,   141,   142,   143,   135,   136,   137,
   138,   139,   140,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   141,   142,   143,     0,   324,   144,     0,
   617,     0,   135,   136,   137,   138,   139,   140,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   144,   141,   142,
   143,     0,   324,     0,     0,   694,     0,   135,   136,   137,
   138,   139,   140,     0,     0,     0,     0,     0,     0,   153,
     0,     0,   144,   141,   142,   143,     0,   324,   924,     0,
     0,     0,   135,   136,   137,   138,   139,   140,   153,     0,
     0,     0,     0,     0,     0,     0,   324,   144,   141,   142,
   143,   135,   136,   137,   138,   139,   140,     0,     0,     0,
     0,     0,     0,   153,     0,     0,     0,   141,   142,   143,
     0,   352,   144,     0,     0,     0,   135,   136,   137,   138,
   139,   140,     0,   325,   326,   156,     0,     0,   153,   158,
     0,   144,   141,   142,   143,     0,     0,     0,     0,     0,
     0,     0,   325,   326,   156,     0,     0,     0,   158,     0,
     0,     0,     0,   153,   640,     0,   144,     0,     0,   135,
   136,   137,   138,   139,   140,     0,     0,   325,   326,   156,
     0,     0,   153,   158,     0,   141,   142,   143,     0,   711,
     0,     0,     0,     0,   712,   713,   714,   715,   716,   717,
     0,     0,   325,   326,   156,     0,     0,   153,   158,   144,
   141,   718,   719,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   325,   326,   156,
     0,     0,     0,   158,   720,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   325,   326,   156,     0,
   153,     0,   158,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   325,   326,   156,     0,   153,     0,   158,     0,     0,
     0,  -169,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   325,   326,   156,     0,     0,     0,
   158,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   325,
   721,   722,     0,     0,     0,   723,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,     0,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,     3,     0,     0,     0,     0,    79,    80,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,  -349,  -349,  -349,     0,     4,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,     0,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,     3,     0,     0,     0,     0,    79,    80,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     4,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    11,    12,    13,     0,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
     0,    24,    25,    26,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,     0,    39,    40,    41,
    42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
    72,    73,    74,  -349,  -349,  -349,     0,     0,    79,    80,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    11,    12,    13,     0,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,     0,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,     0,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
    64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,  -621,  -621,  -621,     0,     0,    79,    80,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,  -621,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,  -621,  -621,  -621,     0,  -621,  -621,  -621,  -621,
  -621,  -621,  -621,  -621,  -621,  -621,     0,  -621,  -621,  -621,
  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,
  -621,  -621,     0,  -621,  -621,  -621,  -621,  -621,  -621,  -621,
  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,
  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,
  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,  -621,     8,
     9,    10,     0,     0,  -621,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    11,    12,
    13,     0,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,     0,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,     0,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,    73,    74,     0,     0,     0,     0,     0,
    79,    80,    11,    12,    13,     0,    14,    15,    16,    17,
    18,    19,    20,    21,    22,    23,     0,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,     0,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,     0,
     0,     0,     0,     0,    79,    80
};

static const short yycheck[] = {     0,
     0,   105,     3,   460,     0,   361,   299,   615,   492,   363,
    11,    12,     2,   316,   410,   546,   470,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,   122,   408,   648,   409,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    88,   619,     8,     0,   443,   759,
     3,   398,   399,   318,     7,   406,   407,   785,   548,     0,
    81,    81,    26,    22,    18,    81,   442,   791,   400,   401,
    34,   648,   446,   648,    24,    34,    21,    24,    99,   702,
    25,   771,   779,   201,   105,   782,    18,    34,   206,   556,
   208,     5,   895,   114,   115,   116,    24,   648,   119,     9,
    10,   111,   220,    48,    49,   572,    34,     0,    26,   119,
     3,    25,     5,   134,   490,    21,    34,    18,   668,    28,
   141,    27,   696,    24,    28,   702,   600,   702,    81,    18,
  1011,  1012,    21,    34,    43,   402,   403,   404,   405,    43,
    81,    65,    66,    67,    68,    69,    70,    71,    72,    73,
    74,   702,   105,     5,   889,   879,     6,     7,   648,    85,
    86,    34,     9,    10,   874,   968,   119,    84,   212,    85,
    86,   899,   134,    97,    18,    99,   129,   101,    21,   103,
   201,     8,   686,   107,   497,   882,    24,  1068,    81,    24,
  1071,    21,    27,   117,   118,  1074,  1075,    27,   888,    34,
   890,   575,    95,    96,   599,    98,   471,     8,    32,    33,
   174,   175,   702,   177,   178,   174,   175,   179,   177,   178,
   770,    19,   598,   773,    24,   187,   119,   174,   175,   191,
    41,   193,   648,  1114,   107,   108,   160,     5,  1117,    24,
   975,    26,   977,     5,    55,   621,   174,   175,   174,   175,
     5,   135,   136,   137,   138,   139,   140,    25,   174,   175,
   222,   282,   361,    25,   648,   648,   287,   580,   288,    24,
    25,    26,   595,   174,   175,    48,    49,   298,   299,    34,
   301,   302,   298,   980,    24,   913,   702,    25,    26,     5,
    28,   201,   796,    24,   315,    41,   206,   648,   208,   315,
   321,   648,    24,   324,     8,    43,   857,   134,    18,    55,
   220,   221,   625,    21,    25,    26,   648,    25,   702,   702,
   438,   342,   174,   175,    18,   177,   178,   640,    24,    23,
    26,    39,   342,   134,    24,   909,   959,    27,    34,   174,
   175,   176,   363,   442,    34,   298,    52,    53,   301,   302,
   303,   702,   179,   886,   201,   702,   889,    20,    21,   206,
   187,   208,   315,   287,   191,    24,   193,   291,   321,   859,
   702,    16,   648,   220,   221,   419,   174,   175,   179,   177,
   178,   648,   959,    16,   959,   309,   187,    26,   312,    28,
   191,   490,   193,    21,    34,   222,   320,    25,   711,   323,
   776,    26,    18,    28,    43,    21,   174,   175,   959,   177,
   178,    16,   174,   175,   434,   177,   178,    16,    43,   174,
   175,   222,   177,   178,   445,  1094,   702,   448,    15,   445,
   134,  1100,   448,  1102,   455,   702,   457,    22,   459,   460,
   856,   462,   975,    21,   977,    22,   467,    25,   341,   470,
    18,    21,    22,    21,    32,    33,   477,   419,   174,   175,
   470,   177,   178,   174,   175,    22,   177,   178,   489,   959,
   854,   492,   855,   494,    18,   179,   497,    21,   174,   175,
    29,   177,   178,   179,   174,   175,   176,   191,    39,   193,
    25,    26,   445,    28,    24,   448,    26,   844,   845,   598,
    40,   852,   853,    18,    34,   458,    21,   460,    43,   462,
    25,   395,   396,   397,   846,   847,    54,   470,   222,   443,
   473,    21,   621,    19,   477,    25,   450,    18,   438,    91,
    21,   455,    23,   457,   174,   175,   556,   177,   178,    18,
    22,   465,    21,   959,   918,   469,  1050,    18,    48,    49,
    21,    24,   572,    26,  1031,    91,   577,    18,   451,   580,
    21,    34,   686,    22,   517,   518,    85,    86,    18,    24,
    21,    21,   593,   594,    25,   959,   959,    18,   901,   600,
    21,   848,   849,   850,   851,   174,   175,    91,   177,   178,
   600,   438,   419,   555,    21,    19,   115,   116,    25,   620,
    18,    52,    53,    21,   625,    32,    33,    25,   959,    21,
   129,   495,   959,    25,   635,   636,   122,    21,   419,   640,
    20,    25,     8,     9,    10,    37,    38,   959,    91,   135,
   136,   137,   138,   139,   140,    27,   142,   143,    50,    51,
   963,   662,    21,    24,    48,    49,    25,   600,    21,   670,
   574,   672,    25,    37,    38,   676,   677,  1033,   981,    24,
   681,    26,    18,   986,   685,   686,    50,    51,    18,    21,
    21,   692,   796,    25,    25,   599,   686,   776,  1001,    32,
    33,   994,   692,   959,  1007,    37,    38,   963,     5,    24,
   711,    26,   959,  1016,    24,   619,    26,    18,    50,    51,
   624,   174,   175,    23,   177,   178,    24,    24,    25,    26,
   986,  1087,   811,    22,   607,   419,    18,    34,   671,    96,
   673,    98,  1045,  1046,    25,  1048,   650,    21,   555,   682,
    25,    25,   685,   686,  1010,  1011,  1012,    24,    24,    26,
    21,    28,    21,  1019,    25,   766,    25,    21,   134,    21,
    18,    25,    18,    25,   555,  1078,    43,    29,    24,    46,
    47,    52,    53,    29,    30,    31,    32,    33,    34,    48,
    49,   118,    21,   120,   795,   796,    25,   798,    21,    45,
    46,    47,    25,    18,   131,   132,   796,   134,    18,   136,
   137,    18,  1068,   179,    18,  1071,  1119,    42,  1074,  1075,
   724,   187,   149,    69,  1080,   191,    21,   193,    19,    21,
    25,    37,    38,    25,    21,   201,   202,    21,    25,     9,
   206,    25,   208,     8,    50,    51,    48,    49,   712,   713,
   714,   715,   716,   717,   220,   221,   222,    25,  1114,    20,
    21,  1117,    11,   796,   110,    21,    23,    20,    21,    25,
    24,    11,    26,   806,    28,   361,    24,    21,    21,    21,
   784,    25,    25,    25,   885,    24,    21,    21,    22,    43,
    25,   892,    46,    47,    87,   768,   174,   175,   771,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,   395,
   396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
   406,   407,   408,   409,   410,    21,    19,    21,   174,   175,
   176,    25,    21,    19,   180,    19,    25,   961,    19,    20,
    34,    35,    36,    24,    19,    27,  1050,    24,    29,    30,
    31,    32,    33,    34,  1033,    21,   442,    21,    21,    25,
   984,    25,    25,    87,    45,    46,    47,   132,   969,   134,
    25,   972,    21,   877,   878,    22,   972,   841,   842,   843,
    21,   885,    21,    21,    25,    18,    25,   988,    69,   990,
    24,    21,   988,   994,   927,   928,   997,   998,   988,    21,
    25,  1001,    21,    25,   490,   909,    25,    21,  1087,   495,
    22,    25,   378,   886,   179,   888,   889,   890,    11,    21,
  1099,    21,   187,    25,    27,    25,   191,    21,   193,   110,
  1031,    25,    24,  1034,    21,    24,   201,    25,    25,   972,
    34,    35,    36,    21,    21,  1045,    21,    25,    25,  1050,
    25,    24,    21,   419,    20,   988,    25,   222,   922,    21,
   546,    21,   548,    25,   550,    25,   970,     8,     9,    10,
    19,    23,   438,    77,    78,    79,    80,    81,    82,    83,
  1081,    20,    19,  1084,     5,     8,     9,    10,  1084,    23,
    66,    67,    68,   174,   175,   176,    27,    21,  1031,   180,
    20,    20,   975,    25,   977,    34,    35,    36,    34,    35,
    36,    24,   598,    71,    72,    73,    22,  1050,    71,    72,
    73,    24,     8,     9,    10,    25,    18,    25,    27,    18,
    25,  1035,    25,    27,    21,   621,  1069,  1070,    29,  1140,
    25,   355,    24,    39,    54,  1146,    71,    72,    73,    25,
    40,  1084,    77,    78,    79,    80,    81,    82,    83,   324,
    87,    25,   648,    24,    18,   379,   331,   332,   333,   334,
   384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
   394,    25,  1115,  1116,    25,    25,    25,   352,    21,   555,
    18,    25,    18,   134,    21,    18,   178,    21,   363,    87,
    22,   415,    20,    87,    20,    25,    87,    87,    25,    87,
   189,   134,    71,    72,    73,   380,   702,  1121,    77,    78,
    79,    80,    81,    82,    83,    87,   712,   713,   714,   715,
   716,   717,   718,   719,    18,    20,    72,    20,   179,    27,
    87,    27,    87,     0,     0,   321,   187,   760,   134,    81,
   191,   985,   193,  1009,   419,  1060,   179,   874,   906,  1114,
   201,   426,   986,  1080,   187,   206,   825,   208,   191,   580,
   193,  1084,   462,   673,     8,     9,    10,   671,   201,   220,
   221,   222,   796,   206,   685,   208,   111,    10,   342,   221,
   776,  1054,   508,   179,   419,   959,   702,   220,   221,   222,
    -1,   187,    -1,    -1,    23,   191,    -1,   193,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   201,    -1,    -1,    -1,    -1,
   206,    -1,   208,    -1,    -1,   811,    -1,    -1,     8,     9,
    10,    -1,    -1,    -1,   220,   221,   222,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   841,   842,   843,   844,   845,
   846,   847,   848,   849,   850,   851,   852,   853,   854,   855,
   856,   857,    -1,   859,     8,     9,    10,    -1,    -1,    -1,
    -1,    -1,   547,    -1,    -1,    -1,   365,    -1,    -1,    -1,
   555,    -1,    -1,    -1,   373,    -1,   375,    -1,    -1,    19,
   134,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,   632,    -1,
    -1,    -1,    -1,    -1,    -1,    45,    46,    47,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   922,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   179,   425,    -1,    -1,    69,
   615,    -1,    -1,   187,   134,    -1,    -1,   191,    -1,   193,
    -1,   675,    -1,    -1,    -1,   444,    -1,   201,    -1,    -1,
    -1,    -1,   206,   959,   208,   640,    -1,    -1,   419,    -1,
    -1,   646,    -1,    -1,   649,    -1,   220,   221,   222,    -1,
   110,    -1,    -1,    -1,    -1,    -1,   419,   438,    -1,   179,
   134,   480,    -1,    -1,    -1,    -1,    -1,   187,    -1,    -1,
    -1,   191,    -1,   193,    -1,   438,    -1,    -1,    -1,    -1,
    -1,   201,    -1,    -1,    -1,    -1,   206,    -1,   208,   508,
    -1,    -1,    -1,   419,    -1,    -1,   701,    -1,    -1,    -1,
   220,   221,   222,    -1,    -1,   179,   711,  1033,    -1,    -1,
    -1,    -1,   438,   187,   174,   175,   176,   191,    -1,   193,
   180,    -1,    -1,    -1,    -1,   779,    -1,   201,   782,    -1,
    -1,    -1,   206,    -1,   208,    -1,    -1,   556,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   220,   221,   222,    -1,
    -1,    -1,    -1,   572,   573,    -1,    -1,    -1,    -1,    -1,
    -1,  1087,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
   824,   825,    -1,  1099,   555,    -1,   830,   831,   832,   833,
   834,   835,   836,   837,   838,   839,   840,    -1,    -1,    -1,
    -1,   610,   555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   627,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   826,    -1,    -1,    -1,   644,   645,    -1,   882,   555,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   656,    -1,    -1,
    -1,    -1,    -1,    -1,     1,   419,    -1,    -1,    -1,     6,
     7,     8,    -1,    -1,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,   438,    -1,    -1,    24,    25,   688,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
   699,    -1,    -1,    -1,    -1,    42,    -1,    -1,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   419,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   913,    -1,
    -1,    -1,    69,    -1,    -1,    -1,    -1,    -1,   438,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   980,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    91,    92,    93,    94,    95,    96,
    97,    -1,    -1,    -1,    -1,   419,    -1,    -1,    -1,   106,
    -1,    -1,   957,   110,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   438,    -1,    -1,    -1,    -1,    -1,
    -1,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   555,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    44,    -1,   174,   175,   176,
   177,   178,    -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   555,    -1,    66,    67,    68,
    -1,    70,    -1,    -1,    -1,    74,    75,    76,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    88,
    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
   109,   555,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,    -1,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,   174,   175,    -1,   177,   178,
   179,   180,     0,     1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    66,    67,
    68,    -1,    70,    -1,    -1,    -1,    74,    75,    76,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    88,    89,    90,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,    -1,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,   174,   175,     1,   177,
   178,   179,   180,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    66,    67,    68,    69,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,     1,    -1,
    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    -1,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    66,    67,    68,    69,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,     1,    -1,
    -1,    -1,    -1,     6,     7,     8,    -1,    -1,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    -1,    -1,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    66,    67,    68,    69,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,
    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,     1,    -1,
    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
     1,    -1,    45,    46,    47,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    69,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    -1,    -1,    45,    46,    47,    -1,    91,    92,
    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   106,    -1,    -1,    -1,   110,    69,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    91,    92,    93,    94,    95,    96,    97,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,   110,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   174,   175,   176,   177,   178,    -1,   180,    -1,     1,
    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    -1,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,   174,   175,   176,   177,   178,    -1,   180,
    42,     1,    -1,    45,    46,    47,     6,     7,     8,    -1,
    10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    -1,    -1,    -1,    24,    -1,    -1,    69,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,    91,
    92,    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,   110,    69,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,
   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   174,   175,   176,   177,   178,    -1,   180,    -1,
     1,    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    -1,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,   174,   175,   176,   177,   178,    -1,
   180,    42,     1,    -1,    45,    46,    47,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    -1,    -1,    -1,    -1,    24,    -1,    -1,    69,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    -1,    -1,    45,    46,    47,    -1,
    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,   110,
    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,
    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,   180,
    -1,    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,   174,   175,   176,   177,   178,
    42,   180,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    92,    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,    -1,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,   179,   180,     6,
     7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    -1,    44,    45,    46,
    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    69,    70,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,
    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,    -1,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
    -1,   138,   139,   140,   141,   142,   143,   144,   145,   146,
   147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,     6,     7,     8,    -1,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    -1,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    70,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    92,    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   106,   107,   108,   109,   110,   111,
   112,   113,   114,   115,   116,   117,   118,   119,   120,    -1,
   122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
   132,   133,   134,   135,   136,    -1,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   175,   176,   177,   178,   179,   180,     6,
     7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
    47,     6,     7,     8,    -1,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    -1,    -1,    -1,    24,
    -1,    -1,    69,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    45,    46,    47,    -1,    -1,    92,    93,    94,    95,    96,
    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
    -1,    -1,    -1,   110,    69,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    92,    93,    94,
    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   106,    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,   175,   176,
   177,   178,    -1,   180,    -1,    -1,    -1,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,   174,
   175,   176,   177,   178,    -1,   180,    45,    46,    47,     6,
     7,     8,    -1,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    -1,    -1,    -1,    24,    -1,    -1,
    69,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,
    47,    -1,    -1,    92,    93,    94,    95,    96,    97,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,
    -1,   110,    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    92,    93,    94,    95,    96,
    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,
    -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   174,   175,   176,   177,   178,
    -1,   180,    -1,    -1,    -1,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,   174,   175,   176,
   177,   178,    -1,   180,    45,    46,    47,     6,     7,     8,
    -1,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    -1,    -1,    -1,    24,    -1,    -1,    69,    -1,
    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    45,    46,    47,    -1,
    -1,    92,    93,    94,    95,    96,    97,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,   110,
    69,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    92,    93,    94,    95,    96,    97,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,
    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,   180,
    -1,    -1,    -1,     6,     7,     8,    -1,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,    -1,    -1,   174,   175,   176,   177,   178,
    -1,   180,    45,    46,    47,     6,     7,     8,    -1,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    69,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    45,    46,    47,    -1,    -1,    92,
    93,    94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   106,    -1,    -1,    -1,   110,    69,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    92,    93,    94,    95,    96,    97,    18,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,   110,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    44,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   174,   175,   176,   177,   178,    -1,   180,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,   174,   175,   176,   177,   178,    -1,   180,
    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    18,    -1,    -1,    -1,    -1,   179,   180,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    44,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    87,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   107,   108,   109,    -1,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,    -1,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    19,    -1,    -1,   179,   180,    24,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    44,    -1,    19,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    -1,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    70,    -1,    45,    46,    47,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,
   108,   109,    -1,   111,   112,   113,   114,   115,   116,   117,
   118,   119,   120,    -1,   122,   123,   124,   125,   126,   127,
   128,   129,   130,   131,   132,   133,   134,   135,   136,   110,
   138,   139,   140,   141,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   172,   173,    19,    -1,    -1,    -1,
    -1,   179,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    44,    -1,   174,   175,   176,    -1,    -1,    -1,   180,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    20,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,   108,   109,    -1,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    24,    -1,    -1,    -1,    -1,   179,   180,   107,   108,
   109,    34,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,    -1,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   180,    -1,    -1,   107,   108,   109,    -1,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,    24,   177,   178,   179,   180,    29,    30,
    31,    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    24,    25,    45,    46,    47,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    45,    46,    47,    -1,    24,    69,    -1,
    27,    -1,    29,    30,    31,    32,    33,    34,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    69,    45,    46,
    47,    -1,    24,    -1,    -1,    27,    -1,    29,    30,    31,
    32,    33,    34,    -1,    -1,    -1,    -1,    -1,    -1,   110,
    -1,    -1,    69,    45,    46,    47,    -1,    24,    25,    -1,
    -1,    -1,    29,    30,    31,    32,    33,    34,   110,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    24,    69,    45,    46,
    47,    29,    30,    31,    32,    33,    34,    -1,    -1,    -1,
    -1,    -1,    -1,   110,    -1,    -1,    -1,    45,    46,    47,
    -1,    24,    69,    -1,    -1,    -1,    29,    30,    31,    32,
    33,    34,    -1,   174,   175,   176,    -1,    -1,   110,   180,
    -1,    69,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   174,   175,   176,    -1,    -1,    -1,   180,    -1,
    -1,    -1,    -1,   110,    24,    -1,    69,    -1,    -1,    29,
    30,    31,    32,    33,    34,    -1,    -1,   174,   175,   176,
    -1,    -1,   110,   180,    -1,    45,    46,    47,    -1,    24,
    -1,    -1,    -1,    -1,    29,    30,    31,    32,    33,    34,
    -1,    -1,   174,   175,   176,    -1,    -1,   110,   180,    69,
    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,   175,   176,
    -1,    -1,    -1,   180,    69,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   174,   175,   176,    -1,
   110,    -1,   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,   174,   175,   176,    -1,   110,    -1,   180,    -1,    -1,
    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   174,   175,   176,    -1,    -1,    -1,
   180,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,
   175,   176,    -1,    -1,    -1,   180,   107,   108,   109,    -1,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    44,    -1,    -1,    -1,    -1,   179,   180,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    -1,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    44,    -1,    -1,    -1,    -1,   179,   180,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    70,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,   109,    -1,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
    -1,   122,   123,   124,   125,   126,   127,   128,   129,   130,
   131,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,    66,    67,    68,    -1,    -1,   179,   180,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,   107,   108,   109,    -1,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,    -1,   122,
   123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
   133,   134,   135,   136,    -1,   138,   139,   140,   141,   142,
   143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,    66,    67,    68,    -1,    -1,   179,   180,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,   107,   108,   109,    -1,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,    -1,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    88,
    89,    90,    -1,    -1,   179,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   107,   108,
   109,    -1,   111,   112,   113,   114,   115,   116,   117,   118,
   119,   120,    -1,   122,   123,   124,   125,   126,   127,   128,
   129,   130,   131,   132,   133,   134,   135,   136,    -1,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
   169,   170,   171,   172,   173,    -1,    -1,    -1,    -1,    -1,
   179,   180,   107,   108,   109,    -1,   111,   112,   113,   114,
   115,   116,   117,   118,   119,   120,    -1,   122,   123,   124,
   125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
   135,   136,    -1,   138,   139,   140,   141,   142,   143,   144,
   145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
   155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,
    -1,    -1,    -1,    -1,   179,   180
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/af9/evans/bison-1.28/share/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/af9/evans/bison-1.28/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      sfree (yyss);
	      sfree (yyvs);
#ifdef YYLSP_NEEDED
	      sfree (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 5:
#line 223 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 6:
#line 224 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 7:
#line 225 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 8:
#line 226 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 9:
#line 227 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 10:
#line 228 "cgrammar.y"
{ uentry_checkDecl (); exprNode_free (yyvsp[0].expr); ;
    break;}
case 11:
#line 229 "cgrammar.y"
{ uentry_clearDecl (); ;
    break;}
case 12:
#line 233 "cgrammar.y"
{ checkConstant (yyvsp[-6].qtyp, yyvsp[-4].ntyp); ;
    break;}
case 13:
#line 235 "cgrammar.y"
{ checkValueConstant (yyvsp[-9].qtyp, yyvsp[-7].ntyp, yyvsp[-3].expr) ; ;
    break;}
case 14:
#line 238 "cgrammar.y"
{ context_enterFunctionDecl (); ;
    break;}
case 15:
#line 239 "cgrammar.y"
{ declareStaticFunction (yyvsp[-2].ntyp); context_quietExitFunction (); 
     context_exitFunctionDecl (); ;
    break;}
case 16:
#line 244 "cgrammar.y"
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 17:
#line 250 "cgrammar.y"
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 19:
#line 255 "cgrammar.y"
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 20:
#line 258 "cgrammar.y"
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 21:
#line 260 "cgrammar.y"
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 22:
#line 262 "cgrammar.y"
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 23:
#line 264 "cgrammar.y"
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 24:
#line 280 "cgrammar.y"
{ setCurrentParams (uentryList_missingParams); 
        ;
    break;}
case 25:
#line 283 "cgrammar.y"
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     context_popLoc (); 
   ;
    break;}
case 26:
#line 291 "cgrammar.y"
{ setCurrentParams (yyvsp[-1].entrylist); 
        ;
    break;}
case 27:
#line 294 "cgrammar.y"
{ clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     context_popLoc (); 
   ;
    break;}
case 28:
#line 300 "cgrammar.y"
{ yyval.ntyp = idDecl_create (yyvsp[0].cname, qtype_unknown ()); ;
    break;}
case 29:
#line 302 "cgrammar.y"
{ yyval.ntyp = idDecl_expectFunction (yyvsp[-2].ntyp); ;
    break;}
case 30:
#line 304 "cgrammar.y"
{ yyval.ntyp = idDecl_replaceCtype (yyvsp[-2].ntyp, ctype_makeArray (idDecl_getCtype (yyvsp[-2].ntyp))); ;
    break;}
case 31:
#line 306 "cgrammar.y"
{ 
     int value;

     if (exprNode_hasValue (yyvsp[-2].expr) 
	 && multiVal_isInt (exprNode_getValue (yyvsp[-2].expr)))
       {
	 value = (int) multiVal_forceInt (exprNode_getValue (yyvsp[-2].expr));
       }
     else
       {
	 value = 0;
       }

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ctype_makeFixedArray (idDecl_getCtype (yyvsp[-5].ntyp), value));
   ;
    break;}
case 32:
#line 322 "cgrammar.y"
{ setCurrentParams (uentryList_missingParams); 
        ;
    break;}
case 33:
#line 325 "cgrammar.y"
{ /* need to support globals and modifies here! */
     ctype ct = ctype_makeFunction (idDecl_getCtype (yyvsp[-5].ntyp), 
				    uentryList_makeMissingParams ());

     yyval.ntyp = idDecl_replaceCtype (yyvsp[-5].ntyp, ct);
     context_popLoc (); 
   ;
    break;}
case 34:
#line 333 "cgrammar.y"
{ setCurrentParams (yyvsp[-1].entrylist); 
        ;
    break;}
case 35:
#line 336 "cgrammar.y"
{ clearCurrentParams ();
     yyval.ntyp = idDecl_replaceCtype (yyvsp[-6].ntyp, ctype_makeFunction (idDecl_getCtype (yyvsp[-6].ntyp), yyvsp[-3].entrylist));
     context_popLoc (); 
   ;
    break;}
case 36:
#line 343 "cgrammar.y"
{ setCurrentParams (yyvsp[-1].entrylist); ;
    break;}
case 37:
#line 344 "cgrammar.y"
{ clearCurrentParams (); ;
    break;}
case 38:
#line 345 "cgrammar.y"
{ declareCIter (yyvsp[-8].cname, yyvsp[-6].entrylist); ;
    break;}
case 39:
#line 348 "cgrammar.y"
{ exprNode_checkMacroBody (yyvsp[-1].expr); ;
    break;}
case 40:
#line 349 "cgrammar.y"
{ exprNode_checkIterBody (yyvsp[-1].expr); ;
    break;}
case 41:
#line 350 "cgrammar.y"
{ exprNode_checkIterEnd (yyvsp[-1].expr); ;
    break;}
case 42:
#line 351 "cgrammar.y"
{ exprChecks_checkEmptyMacroBody (); ;
    break;}
case 43:
#line 354 "cgrammar.y"
{ declareFunction (yyvsp[0].ntyp); ;
    break;}
case 44:
#line 357 "cgrammar.y"
{ setProcessingGlobMods (); ;
    break;}
case 45:
#line 358 "cgrammar.y"
{ clearProcessingGlobMods (); ;
    break;}
case 46:
#line 361 "cgrammar.y"
{ setProcessingGlobMods (); ;
    break;}
case 47:
#line 362 "cgrammar.y"
{ clearProcessingGlobMods (); ;
    break;}
case 54:
#line 377 "cgrammar.y"
{ ; ;
    break;}
case 55:
#line 378 "cgrammar.y"
{ ; ;
    break;}
case 56:
#line 381 "cgrammar.y"
{ globListAdd (yyvsp[0].sr, yyvsp[-1].tquallist); ;
    break;}
case 57:
#line 384 "cgrammar.y"
{ yyval.sr = uentry_getSref (yyvsp[0].entry); ;
    break;}
case 58:
#line 385 "cgrammar.y"
{ yyval.sr = globListUnrecognized (yyvsp[0].cname); ;
    break;}
case 59:
#line 388 "cgrammar.y"
{ yyval.typequal = qual_createUndef (); ;
    break;}
case 60:
#line 389 "cgrammar.y"
{ yyval.typequal = qual_createKilled (); ;
    break;}
case 61:
#line 390 "cgrammar.y"
{ yyval.typequal = qual_createOut (); ;
    break;}
case 62:
#line 391 "cgrammar.y"
{ yyval.typequal = qual_createIn (); ;
    break;}
case 63:
#line 392 "cgrammar.y"
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 64:
#line 395 "cgrammar.y"
{ yyval.tquallist = qualList_undefined; ;
    break;}
case 65:
#line 396 "cgrammar.y"
{ yyval.tquallist = qualList_add (yyvsp[0].tquallist, yyvsp[-1].typequal); ;
    break;}
case 66:
#line 399 "cgrammar.y"
{ setProcessingGlobalsList (); ;
    break;}
case 67:
#line 401 "cgrammar.y"
{ unsetProcessingGlobals (); ;
    break;}
case 68:
#line 402 "cgrammar.y"
{ setProcessingGlobalsList (); ;
    break;}
case 69:
#line 404 "cgrammar.y"
{ unsetProcessingGlobals (); ;
    break;}
case 70:
#line 406 "cgrammar.y"
{ setFunctionNoGlobals ();
     setFunctionModifies (sRefSet_single (sRef_makeNothing ())); 
   ;
    break;}
case 73:
#line 413 "cgrammar.y"
{ setProcessingGlobalsList (); ;
    break;}
case 74:
#line 415 "cgrammar.y"
{ unsetProcessingGlobals (); ;
    break;}
case 75:
#line 416 "cgrammar.y"
{ setProcessingGlobalsList (); ;
    break;}
case 76:
#line 418 "cgrammar.y"
{ unsetProcessingGlobals (); ;
    break;}
case 77:
#line 420 "cgrammar.y"
{ setFunctionNoGlobals ();
     setFunctionModifies (sRefSet_single (sRef_makeNothing ())); 
   ;
    break;}
case 82:
#line 432 "cgrammar.y"
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 83:
#line 437 "cgrammar.y"
{ 
     setFunctionModifies (yyvsp[0].srset); exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
   ;
    break;}
case 84:
#line 445 "cgrammar.y"
{
     context_setProtectVars (); enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 85:
#line 450 "cgrammar.y"
{ 
     setFunctionModifies (yyvsp[0].srset); exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
   ;
    break;}
case 95:
#line 474 "cgrammar.y"
{ yyval.sck = SP_ISONLY; ;
    break;}
case 96:
#line 475 "cgrammar.y"
{ yyval.sck = SP_ISOBSERVER; ;
    break;}
case 97:
#line 476 "cgrammar.y"
{ yyval.sck = SP_ISEXPOSED; ;
    break;}
case 98:
#line 477 "cgrammar.y"
{ yyval.sck = SP_ISDEPENDENT; ;
    break;}
case 99:
#line 478 "cgrammar.y"
{ yyval.sck = SP_ISOWNED; ;
    break;}
case 100:
#line 479 "cgrammar.y"
{ yyval.sck = SP_ISSHARED; ;
    break;}
case 101:
#line 480 "cgrammar.y"
{ yyval.sck = SP_ISNULL; ;
    break;}
case 102:
#line 481 "cgrammar.y"
{ yyval.sck = SP_ISNOTNULL; ;
    break;}
case 103:
#line 485 "cgrammar.y"
{
     context_setProtectVars (); 
     enterParamsTemp (); 
     sRef_setGlobalScopeSafe (); 
   ;
    break;}
case 104:
#line 491 "cgrammar.y"
{ 
     setFunctionSpecialClause (yyvsp[-6].tok, yyvsp[-3].srset, yyvsp[-1].tok); 
     exitParamsTemp ();
     sRef_clearGlobalScopeSafe (); 
     context_releaseVars ();
   ;
    break;}
case 105:
#line 498 "cgrammar.y"
{
      context_setProtectVars (); 
      enterParamsTemp (); 
      sRef_setGlobalScopeSafe (); 
    ;
    break;}
case 106:
#line 504 "cgrammar.y"
{ 
      setFunctionStateSpecialClause (yyvsp[-7].tok, yyvsp[-5].sck, yyvsp[-3].srset, yyvsp[-1].tok); 
      exitParamsTemp ();
      sRef_clearGlobalScopeSafe (); 
      context_releaseVars ();
    ;
    break;}
case 107:
#line 513 "cgrammar.y"
{ 
     qtype qint = qtype_create (ctype_int);
     yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, qint);
     qtype_free (qint);
   ;
    break;}
case 108:
#line 519 "cgrammar.y"
{ yyval.ntyp = idDecl_fixBase (yyvsp[0].ntyp, yyvsp[-2].qtyp); ;
    break;}
case 109:
#line 522 "cgrammar.y"
{ checkDoneParams (); context_enterInnerContext (); ;
    break;}
case 110:
#line 524 "cgrammar.y"
{  
     exprNode_checkFunctionBody (yyvsp[0].expr); yyval.expr = yyvsp[0].expr; 
     context_exitInner (yyvsp[0].expr); 
   ;
    break;}
case 111:
#line 529 "cgrammar.y"
{ doneParams (); context_enterInnerContext (); ;
    break;}
case 112:
#line 531 "cgrammar.y"
{
     context_exitInner (yyvsp[0].expr);
     exprNode_checkFunctionBody (yyvsp[0].expr); 
     yyval.expr = yyvsp[0].expr; /* old style */ 
   ;
    break;}
case 113:
#line 539 "cgrammar.y"
{ 
     context_setFunctionDefined (exprNode_loc (yyvsp[0].expr)); 
     exprNode_checkFunction (context_getHeader (), yyvsp[0].expr); 
     context_exitFunction ();
   ;
    break;}
case 114:
#line 546 "cgrammar.y"
{ yyval.srset = yyvsp[-2].srset; ;
    break;}
case 115:
#line 547 "cgrammar.y"
{ yyval.srset = sRefSet_new (); ;
    break;}
case 116:
#line 550 "cgrammar.y"
{ yyval.srset = yyvsp[-1].srset; ;
    break;}
case 117:
#line 551 "cgrammar.y"
{ yyval.srset = sRefSet_new (); ;
    break;}
case 118:
#line 554 "cgrammar.y"
{ yyval.sr = uentry_getSref (yyvsp[0].entry); checkModifiesId (yyvsp[0].entry); ;
    break;}
case 119:
#line 555 "cgrammar.y"
{ yyval.sr = fixModifiesId (yyvsp[0].cname); ;
    break;}
case 120:
#line 556 "cgrammar.y"
{ yyval.sr = modListArrayFetch (yyvsp[-2].sr, sRef_undefined); ;
    break;}
case 121:
#line 557 "cgrammar.y"
{ yyval.sr = modListArrayFetch (yyvsp[-3].sr, yyvsp[-1].sr); ;
    break;}
case 122:
#line 558 "cgrammar.y"
{ yyval.sr = modListPointer (yyvsp[0].sr); ;
    break;}
case 123:
#line 559 "cgrammar.y"
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 124:
#line 560 "cgrammar.y"
{ yyval.sr = modListFieldAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 125:
#line 561 "cgrammar.y"
{ yyval.sr = modListArrowAccess (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 126:
#line 565 "cgrammar.y"
{ yyval.sr = yyvsp[0].sr; ;
    break;}
case 127:
#line 566 "cgrammar.y"
{ yyval.sr = sRef_makeUnknown (); /* sRef_makeConstant ($1); ? */ ;
    break;}
case 128:
#line 570 "cgrammar.y"
{ yyval.srset = sRefSet_single (yyvsp[0].sr); ;
    break;}
case 129:
#line 571 "cgrammar.y"
{ yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); ;
    break;}
case 130:
#line 575 "cgrammar.y"
{ yyval.sr = checkSpecClausesId (yyvsp[0].entry); ;
    break;}
case 131:
#line 577 "cgrammar.y"
{ yyval.sr = fixSpecClausesId (yyvsp[0].cname); ;
    break;}
case 132:
#line 578 "cgrammar.y"
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-2].sr); ;
    break;}
case 133:
#line 579 "cgrammar.y"
{ yyval.sr = sRef_makeAnyArrayFetch (yyvsp[-3].sr); ;
    break;}
case 134:
#line 580 "cgrammar.y"
{ yyval.sr = sRef_constructPointer (yyvsp[0].sr); ;
    break;}
case 135:
#line 581 "cgrammar.y"
{ yyval.sr = yyvsp[-1].sr; ;
    break;}
case 136:
#line 582 "cgrammar.y"
{ cstring_markOwned (yyvsp[0].cname);
					    yyval.sr = sRef_buildField (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 137:
#line 584 "cgrammar.y"
{ cstring_markOwned (yyvsp[0].cname);
                                            yyval.sr = sRef_makeArrow (yyvsp[-2].sr, yyvsp[0].cname); ;
    break;}
case 138:
#line 589 "cgrammar.y"
{ if (sRef_isValid (yyvsp[0].sr)) { yyval.srset = sRefSet_single (yyvsp[0].sr); } 
      else { yyval.srset = sRefSet_undefined; } 
    ;
    break;}
case 139:
#line 593 "cgrammar.y"
{ if (sRef_isValid (yyvsp[0].sr))
	{
	  yyval.srset = sRefSet_insert (yyvsp[-2].srset, yyvsp[0].sr); 
	}
      else
	{
	  yyval.srset = yyvsp[-2].srset;
	}
    ;
    break;}
case 140:
#line 604 "cgrammar.y"
{ yyval.expr = exprNode_fromIdentifier (yyvsp[0].entry); ;
    break;}
case 141:
#line 605 "cgrammar.y"
{ yyval.expr = exprNode_fromUIO (yyvsp[0].cname); ;
    break;}
case 143:
#line 607 "cgrammar.y"
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 144:
#line 608 "cgrammar.y"
{ yyval.expr = exprNode_fromIdentifier (coerceId (yyvsp[0].ctyp)); ;
    break;}
case 145:
#line 609 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 147:
#line 613 "cgrammar.y"
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 148:
#line 614 "cgrammar.y"
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 149:
#line 615 "cgrammar.y"
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].alist); ;
    break;}
case 150:
#line 616 "cgrammar.y"
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 151:
#line 617 "cgrammar.y"
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-1].cname); ;
    break;}
case 152:
#line 618 "cgrammar.y"
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-1].cname); ;
    break;}
case 153:
#line 619 "cgrammar.y"
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 154:
#line 620 "cgrammar.y"
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 155:
#line 623 "cgrammar.y"
{ yyval.alist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 156:
#line 624 "cgrammar.y"
{ yyval.alist = exprNodeList_push (yyvsp[-2].alist, yyvsp[0].expr); ;
    break;}
case 158:
#line 628 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 159:
#line 629 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 160:
#line 630 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 161:
#line 631 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 162:
#line 632 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 163:
#line 633 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 164:
#line 634 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 165:
#line 635 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 166:
#line 636 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 167:
#line 637 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 168:
#line 641 "cgrammar.y"
{ yyval.expr = exprNode_offsetof (yyvsp[-5].qtyp, yyvsp[-2].cname); ;
    break;}
case 169:
#line 644 "cgrammar.y"
{ context_setProtectVars (); ;
    break;}
case 170:
#line 645 "cgrammar.y"
{ context_sizeofReleaseVars (); yyval.expr = yyvsp[0].expr; ;
    break;}
case 171:
#line 648 "cgrammar.y"
{ yyval.expr = exprNode_sizeofType (yyvsp[-1].qtyp); ;
    break;}
case 172:
#line 649 "cgrammar.y"
{ yyval.expr = exprNode_sizeofExpr (yyvsp[0].expr); ;
    break;}
case 174:
#line 654 "cgrammar.y"
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 176:
#line 658 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 177:
#line 659 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 178:
#line 660 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 180:
#line 664 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 181:
#line 665 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 183:
#line 669 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 184:
#line 670 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 186:
#line 674 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 187:
#line 675 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 188:
#line 676 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 189:
#line 677 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 191:
#line 681 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 192:
#line 682 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 194:
#line 686 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 196:
#line 690 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 198:
#line 695 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 200:
#line 700 "cgrammar.y"
{ exprNode_produceGuards (yyvsp[-1].expr); 
     context_enterAndClause (yyvsp[-1].expr); 
   ;
    break;}
case 201:
#line 704 "cgrammar.y"
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitAndClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 203:
#line 712 "cgrammar.y"
{ 
     exprNode_produceGuards (yyvsp[-1].expr);
     context_enterOrClause (yyvsp[-1].expr); 
   ;
    break;}
case 204:
#line 717 "cgrammar.y"
{ 
     yyval.expr = exprNode_op (yyvsp[-3].expr, yyvsp[0].expr, yyvsp[-2].tok); 
     context_exitOrClause (yyval.expr, yyvsp[0].expr);
   ;
    break;}
case 206:
#line 724 "cgrammar.y"
{ exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 207:
#line 725 "cgrammar.y"
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 208:
#line 726 "cgrammar.y"
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); context_exitClause (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 210:
#line 730 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 211:
#line 731 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 212:
#line 732 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 213:
#line 733 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 214:
#line 734 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 215:
#line 735 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 216:
#line 736 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 217:
#line 737 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 218:
#line 738 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 219:
#line 739 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 220:
#line 740 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 222:
#line 744 "cgrammar.y"
{ yyval.expr = exprNode_comma (yyvsp[-2].expr, yyvsp[0].expr); ;
    break;}
case 223:
#line 747 "cgrammar.y"
{ yyval.expr = exprNode_undefined; ;
    break;}
case 226:
#line 756 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 227:
#line 757 "cgrammar.y"
{ doVaDcl (); yyval.expr = exprNode_makeError (); ;
    break;}
case 228:
#line 758 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 229:
#line 761 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 230:
#line 775 "cgrammar.y"
{
               setProcessingVars (yyvsp[-3].qtyp); 
     processNamedDecl (yyvsp[-1].ntyp); ;
    break;}
case 231:
#line 778 "cgrammar.y"
{ unsetProcessingVars (); yyval.expr = yyvsp[-2].expr; ;
    break;}
case 232:
#line 780 "cgrammar.y"
{ setProcessingVars (yyvsp[-4].qtyp); processNamedDecl (yyvsp[-2].ntyp); 
        ;
    break;}
case 233:
#line 783 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-2].expr, exprNode_makeInitialization (yyvsp[-8].ntyp, yyvsp[-3].expr)); 
     unsetProcessingVars ();
   ;
    break;}
case 234:
#line 787 "cgrammar.y"
{ processNamedDecl (yyvsp[-1].ntyp); yyval.expr = exprNode_makeError (); ;
    break;}
case 235:
#line 788 "cgrammar.y"
{ processNamedDecl (yyvsp[-2].ntyp); ;
    break;}
case 236:
#line 789 "cgrammar.y"
{ yyval.expr = exprNode_makeInitialization (yyvsp[-5].ntyp, yyvsp[0].expr); ;
    break;}
case 237:
#line 793 "cgrammar.y"
{ setProcessingTypedef (yyvsp[0].qtyp); ;
    break;}
case 238:
#line 794 "cgrammar.y"
{ unsetProcessingTypedef (); ;
    break;}
case 239:
#line 795 "cgrammar.y"
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 240:
#line 796 "cgrammar.y"
{ /* in the ANSI grammar, semantics unclear */ ;
    break;}
case 241:
#line 799 "cgrammar.y"
{ g_expectingTypeName = TRUE; ;
    break;}
case 242:
#line 802 "cgrammar.y"
{ g_expectingTypeName = TRUE; context_pushLoc (); ;
    break;}
case 243:
#line 805 "cgrammar.y"
{ ; ;
    break;}
case 244:
#line 808 "cgrammar.y"
{ ; ;
    break;}
case 245:
#line 809 "cgrammar.y"
{ ; ;
    break;}
case 246:
#line 812 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 247:
#line 813 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 249:
#line 817 "cgrammar.y"
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-2].tok, yyvsp[-1].alist); ;
    break;}
case 250:
#line 818 "cgrammar.y"
{ yyval.expr = exprNode_makeInitBlock (yyvsp[-3].tok, yyvsp[-2].alist); ;
    break;}
case 251:
#line 823 "cgrammar.y"
{ yyval.alist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 252:
#line 825 "cgrammar.y"
{ yyval.alist = exprNodeList_push (yyvsp[-2].alist, yyvsp[0].expr); ;
    break;}
case 253:
#line 833 "cgrammar.y"
{ setStorageClass (SCEXTERN); yyval.typequal = qual_createExtern (); ;
    break;}
case 254:
#line 834 "cgrammar.y"
{ yyval.typequal = qual_createInline (); ;
    break;}
case 255:
#line 835 "cgrammar.y"
{ setStorageClass (SCSTATIC); yyval.typequal = qual_createStatic (); ;
    break;}
case 256:
#line 836 "cgrammar.y"
{ yyval.typequal = qual_createAuto (); ;
    break;}
case 257:
#line 837 "cgrammar.y"
{ yyval.typequal = qual_createRegister (); ;
    break;}
case 258:
#line 840 "cgrammar.y"
{ yyval.typequal = qual_createConst (); ;
    break;}
case 259:
#line 841 "cgrammar.y"
{ yyval.typequal = qual_createVolatile (); ;
    break;}
case 260:
#line 842 "cgrammar.y"
{ yyval.typequal = qual_createOut (); ;
    break;}
case 261:
#line 843 "cgrammar.y"
{ yyval.typequal = qual_createIn (); ;
    break;}
case 262:
#line 844 "cgrammar.y"
{ yyval.typequal = qual_createPartial (); ;
    break;}
case 263:
#line 845 "cgrammar.y"
{ yyval.typequal = qual_createSpecial (); ;
    break;}
case 264:
#line 846 "cgrammar.y"
{ yyval.typequal = qual_createOwned (); ;
    break;}
case 265:
#line 847 "cgrammar.y"
{ yyval.typequal = qual_createDependent (); ;
    break;}
case 266:
#line 848 "cgrammar.y"
{ yyval.typequal = qual_createYield (); ;
    break;}
case 267:
#line 849 "cgrammar.y"
{ yyval.typequal = qual_createTemp (); ;
    break;}
case 268:
#line 850 "cgrammar.y"
{ yyval.typequal = qual_createOnly (); ;
    break;}
case 269:
#line 851 "cgrammar.y"
{ yyval.typequal = qual_createKeep (); ;
    break;}
case 270:
#line 852 "cgrammar.y"
{ yyval.typequal = qual_createKept (); ;
    break;}
case 271:
#line 853 "cgrammar.y"
{ yyval.typequal = qual_createShared (); ;
    break;}
case 272:
#line 854 "cgrammar.y"
{ yyval.typequal = qual_createUnique (); ;
    break;}
case 273:
#line 855 "cgrammar.y"
{ yyval.typequal = qual_createExits (); ;
    break;}
case 274:
#line 856 "cgrammar.y"
{ yyval.typequal = qual_createMayExit (); ;
    break;}
case 275:
#line 857 "cgrammar.y"
{ yyval.typequal = qual_createTrueExit (); ;
    break;}
case 276:
#line 858 "cgrammar.y"
{ yyval.typequal = qual_createFalseExit (); ;
    break;}
case 277:
#line 859 "cgrammar.y"
{ yyval.typequal = qual_createNeverExit (); ;
    break;}
case 278:
#line 860 "cgrammar.y"
{ yyval.typequal = qual_createNull (); ;
    break;}
case 279:
#line 861 "cgrammar.y"
{ yyval.typequal = qual_createRelNull (); ;
    break;}
case 280:
#line 862 "cgrammar.y"
{ yyval.typequal = qual_createReturned (); ;
    break;}
case 281:
#line 863 "cgrammar.y"
{ yyval.typequal = qual_createExposed (); ;
    break;}
case 282:
#line 864 "cgrammar.y"
{ yyval.typequal = qual_createObserver (); ;
    break;}
case 283:
#line 865 "cgrammar.y"
{ yyval.typequal = qual_createChecked (); ;
    break;}
case 284:
#line 866 "cgrammar.y"
{ yyval.typequal = qual_createCheckMod (); ;
    break;}
case 285:
#line 867 "cgrammar.y"
{ yyval.typequal = qual_createUnchecked (); ;
    break;}
case 286:
#line 868 "cgrammar.y"
{ yyval.typequal = qual_createCheckedStrict (); ;
    break;}
case 287:
#line 869 "cgrammar.y"
{ yyval.typequal = qual_createTrueNull (); ;
    break;}
case 288:
#line 870 "cgrammar.y"
{ yyval.typequal = qual_createFalseNull (); ;
    break;}
case 289:
#line 871 "cgrammar.y"
{ yyval.typequal = qual_createUnused (); ;
    break;}
case 290:
#line 872 "cgrammar.y"
{ yyval.typequal = qual_createExternal (); ;
    break;}
case 291:
#line 873 "cgrammar.y"
{ yyval.typequal = qual_createSef (); ;
    break;}
case 292:
#line 874 "cgrammar.y"
{ yyval.typequal = qual_createAbstract (); ;
    break;}
case 293:
#line 875 "cgrammar.y"
{ yyval.typequal = qual_createConcrete (); ;
    break;}
case 294:
#line 876 "cgrammar.y"
{ yyval.typequal = qual_createMutable (); ;
    break;}
case 295:
#line 877 "cgrammar.y"
{ yyval.typequal = qual_createImmutable (); ;
    break;}
case 296:
#line 878 "cgrammar.y"
{ yyval.typequal = qual_createNotNull (); ;
    break;}
case 297:
#line 879 "cgrammar.y"
{ yyval.typequal = qual_createRefCounted (); ;
    break;}
case 298:
#line 880 "cgrammar.y"
{ yyval.typequal = qual_createRefs (); ;
    break;}
case 299:
#line 881 "cgrammar.y"
{ yyval.typequal = qual_createKillRef (); ;
    break;}
case 300:
#line 882 "cgrammar.y"
{ yyval.typequal = qual_createRelDef (); ;
    break;}
case 301:
#line 883 "cgrammar.y"
{ yyval.typequal = qual_createNewRef (); ;
    break;}
case 302:
#line 884 "cgrammar.y"
{ yyval.typequal = qual_createTempRef (); ;
    break;}
case 303:
#line 887 "cgrammar.y"
{ yyval.typequal = qual_createShort (); ;
    break;}
case 304:
#line 888 "cgrammar.y"
{ yyval.typequal = qual_createLong (); ;
    break;}
case 305:
#line 889 "cgrammar.y"
{ yyval.typequal = qual_createSigned (); ;
    break;}
case 306:
#line 890 "cgrammar.y"
{ yyval.typequal = qual_createUnsigned (); ;
    break;}
case 313:
#line 899 "cgrammar.y"
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 314:
#line 900 "cgrammar.y"
{ yyval.ctyp = ctype_anyintegral; ;
    break;}
case 315:
#line 901 "cgrammar.y"
{ yyval.ctyp = ctype_unsignedintegral; ;
    break;}
case 316:
#line 902 "cgrammar.y"
{ yyval.ctyp = ctype_signedintegral; ;
    break;}
case 320:
#line 906 "cgrammar.y"
{ yyval.ctyp = ctype_fromQual (yyvsp[-1].typequal); ;
    break;}
case 321:
#line 910 "cgrammar.y"
{ yyval.qtyp = qtype_resolve (yyvsp[-1].qtyp); ;
    break;}
case 322:
#line 913 "cgrammar.y"
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 323:
#line 915 "cgrammar.y"
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-3].qtyp, yyvsp[-1].qtyp); ;
    break;}
case 325:
#line 920 "cgrammar.y"
{ yyval.qtyp = qtype_mergeAlt (yyvsp[-2].qtyp, yyvsp[0].qtyp); ;
    break;}
case 326:
#line 923 "cgrammar.y"
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 327:
#line 924 "cgrammar.y"
{ yyval.qtyp = qtype_addQual (yyvsp[0].qtyp, yyvsp[-1].typequal); ;
    break;}
case 328:
#line 925 "cgrammar.y"
{ yyval.qtyp = qtype_combine (yyvsp[0].qtyp, yyvsp[-1].ctyp); ;
    break;}
case 329:
#line 928 "cgrammar.y"
{ yyval.qtyp = qtype_unknown (); ;
    break;}
case 330:
#line 929 "cgrammar.y"
{ yyval.qtyp = yyvsp[0].qtyp; ;
    break;}
case 331:
#line 932 "cgrammar.y"
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 332:
#line 934 "cgrammar.y"
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 333:
#line 936 "cgrammar.y"
{ yyval.ctyp = declareStruct (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 334:
#line 937 "cgrammar.y"
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 335:
#line 939 "cgrammar.y"
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 336:
#line 941 "cgrammar.y"
{ yyval.ctyp = declareUnion (yyvsp[-8].cname, yyvsp[-3].flist); ;
    break;}
case 337:
#line 943 "cgrammar.y"
{ yyval.ctyp = declareStruct (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 338:
#line 945 "cgrammar.y"
{ yyval.ctyp = declareUnion (yyvsp[-3].cname, uentryList_new ()); ;
    break;}
case 339:
#line 946 "cgrammar.y"
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 340:
#line 948 "cgrammar.y"
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 341:
#line 950 "cgrammar.y"
{ yyval.ctyp = declareUnnamedStruct (yyvsp[-3].flist); ;
    break;}
case 342:
#line 951 "cgrammar.y"
{ sRef_setGlobalScopeSafe (); ;
    break;}
case 343:
#line 953 "cgrammar.y"
{ sRef_clearGlobalScopeSafe (); ;
    break;}
case 344:
#line 955 "cgrammar.y"
{ yyval.ctyp = declareUnnamedUnion (yyvsp[-3].flist); ;
    break;}
case 345:
#line 957 "cgrammar.y"
{ yyval.ctyp = ctype_createUnnamedStruct (uentryList_new ()); ;
    break;}
case 346:
#line 959 "cgrammar.y"
{ yyval.ctyp = ctype_createUnnamedUnion (uentryList_new ()); ;
    break;}
case 347:
#line 960 "cgrammar.y"
{ yyval.ctyp = handleStruct (yyvsp[-1].cname); ;
    break;}
case 348:
#line 961 "cgrammar.y"
{ yyval.ctyp = handleUnion (yyvsp[-1].cname); ;
    break;}
case 349:
#line 964 "cgrammar.y"
{ g_expectingTypeName = FALSE; ;
    break;}
case 351:
#line 968 "cgrammar.y"
{ yyval.flist = uentryList_undefined; /* bogus! */ ;
    break;}
case 352:
#line 969 "cgrammar.y"
{ yyval.flist = uentryList_mergeFields (yyvsp[-1].flist, yyvsp[0].flist); ;
    break;}
case 353:
#line 973 "cgrammar.y"
{ yyval.flist = fixUentryList (yyvsp[-2].ntyplist, yyvsp[-4].qtyp); ;
    break;}
case 354:
#line 975 "cgrammar.y"
{ yyval.flist = fixUnnamedDecl (yyvsp[-2].qtyp); ;
    break;}
case 355:
#line 979 "cgrammar.y"
{ yyval.ntyplist = idDeclList_singleton (yyvsp[-1].ntyp); ;
    break;}
case 356:
#line 981 "cgrammar.y"
{ yyval.ntyplist = idDeclList_add (yyvsp[-3].ntyplist, yyvsp[-1].ntyp); ;
    break;}
case 357:
#line 984 "cgrammar.y"
{ yyval.ntyp = yyvsp[0].ntyp; ;
    break;}
case 358:
#line 985 "cgrammar.y"
{ yyval.ntyp = idDecl_undefined; ;
    break;}
case 359:
#line 986 "cgrammar.y"
{ yyval.ntyp = yyvsp[-2].ntyp; ;
    break;}
case 360:
#line 990 "cgrammar.y"
{ yyval.ctyp = declareUnnamedEnum (yyvsp[-2].enumnamelist); ;
    break;}
case 361:
#line 991 "cgrammar.y"
{ context_pushLoc (); ;
    break;}
case 362:
#line 992 "cgrammar.y"
{ context_popLoc (); yyval.ctyp = declareEnum (yyvsp[-5].cname, yyvsp[-2].enumnamelist); ;
    break;}
case 363:
#line 993 "cgrammar.y"
{ yyval.ctyp = handleEnum (yyvsp[-1].cname); ;
    break;}
case 364:
#line 997 "cgrammar.y"
{ yyval.enumnamelist = enumNameList_single (yyvsp[0].cname); ;
    break;}
case 365:
#line 999 "cgrammar.y"
{ yyval.enumnamelist = enumNameList_push (yyvsp[-2].enumnamelist, yyvsp[0].cname); ;
    break;}
case 367:
#line 1004 "cgrammar.y"
{ uentry ue = uentry_makeEnumConstant (yyvsp[0].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[0].cname;
   ;
    break;}
case 368:
#line 1009 "cgrammar.y"
{ uentry ue = uentry_makeEnumConstant (yyvsp[-3].cname, ctype_unknown);
     usymtab_supGlobalEntry (ue);
     yyval.cname = yyvsp[-3].cname; 
   ;
    break;}
case 370:
#line 1016 "cgrammar.y"
{ yyval.ntyp = idDecl_create (cstring_undefined, qtype_create (yyvsp[0].ctyp)); ;
    break;}
case 371:
#line 1018 "cgrammar.y"
{ 
     qtype qt = qtype_unknown ();

     qtype_adjustPointers (yyvsp[-1].count, qt);
     yyval.ntyp = idDecl_create (cstring_copy (LastIdentifier ()), qt);
   ;
    break;}
case 372:
#line 1025 "cgrammar.y"
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 374:
#line 1030 "cgrammar.y"
{ yyval.ntyp = yyvsp[0].ntyp; qtype_adjustPointers (yyvsp[-1].count, idDecl_getTyp (yyval.ntyp)); ;
    break;}
case 375:
#line 1033 "cgrammar.y"
{ yyval.entrylist = handleParamTypeList (yyvsp[0].entrylist); ;
    break;}
case 376:
#line 1034 "cgrammar.y"
{ yyval.entrylist = handleParamIdList (yyvsp[0].entrylist); ;
    break;}
case 377:
#line 1037 "cgrammar.y"
{ /* ignored for now */; ;
    break;}
case 378:
#line 1038 "cgrammar.y"
{ ; ;
    break;}
case 379:
#line 1041 "cgrammar.y"
{ ; ;
    break;}
case 380:
#line 1042 "cgrammar.y"
{ ; ;
    break;}
case 381:
#line 1045 "cgrammar.y"
{ yyval.count = 1; ;
    break;}
case 382:
#line 1046 "cgrammar.y"
{ yyval.count = 1; ;
    break;}
case 383:
#line 1047 "cgrammar.y"
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 384:
#line 1048 "cgrammar.y"
{ yyval.count = 1 + yyvsp[0].count; ;
    break;}
case 386:
#line 1052 "cgrammar.y"
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 387:
#line 1055 "cgrammar.y"
{ yyval.entrylist = uentryList_single (uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 388:
#line 1056 "cgrammar.y"
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeVariableLoc (yyvsp[0].cname, ctype_int)); ;
    break;}
case 389:
#line 1059 "cgrammar.y"
{ yyval.entrylist = uentryList_single (uentry_makeElipsisMarker ()); ;
    break;}
case 391:
#line 1061 "cgrammar.y"
{ yyval.entrylist = uentryList_add (yyvsp[-2].entrylist, uentry_makeElipsisMarker ()); ;
    break;}
case 392:
#line 1064 "cgrammar.y"
{ storeLoc (); ;
    break;}
case 393:
#line 1064 "cgrammar.y"
{ yyval.entrylist = uentryList_single (yyvsp[0].oentry); ;
    break;}
case 394:
#line 1065 "cgrammar.y"
{ storeLoc (); ;
    break;}
case 395:
#line 1066 "cgrammar.y"
{ yyval.entrylist = uentryList_add (yyvsp[-3].entrylist, yyvsp[0].oentry); ;
    break;}
case 396:
#line 1070 "cgrammar.y"
{ 
     if (isFlipOldStyle ()) 
       { 
	 llparseerror (cstring_makeLiteral ("Inconsistent function parameter syntax (mixing old and new style declaration)")); 
       }
     else 
       { 
	 setNewStyle (); 
       }
     yyval.oentry = makeCurrentParam (idDecl_fixParamBase (yyvsp[-1].ntyp, yyvsp[-2].qtyp)); 
   ;
    break;}
case 397:
#line 1082 "cgrammar.y"
{ 
     idDecl tparam = idDecl_create (yyvsp[0].cname, qtype_unknown ());

     if (isNewStyle ()) 
       {
	 llparseerror (message ("Inconsistent function parameter syntax: %q",
				idDecl_unparse (tparam))); 
       }

     setFlipOldStyle ();
     yyval.oentry = makeCurrentParam (tparam);
     idDecl_free (tparam);
   ;
    break;}
case 399:
#line 1098 "cgrammar.y"
{ yyval.qtyp = qtype_newBase (yyvsp[-1].qtyp, yyvsp[0].ctyp); ;
    break;}
case 400:
#line 1101 "cgrammar.y"
{ yyval.ctyp = ctype_adjustPointers (yyvsp[0].count, ctype_unknown); ;
    break;}
case 402:
#line 1103 "cgrammar.y"
{ yyval.ctyp = ctype_adjustPointers (yyvsp[-1].count, yyvsp[0].ctyp); ;
    break;}
case 403:
#line 1106 "cgrammar.y"
{ yyval.ctyp = ctype_unknown; ;
    break;}
case 405:
#line 1111 "cgrammar.y"
{ yyval.ctyp = ctype_expectFunction (yyvsp[-1].ctyp); ;
    break;}
case 406:
#line 1112 "cgrammar.y"
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 407:
#line 1113 "cgrammar.y"
{ yyval.ctyp = ctype_makeArray (ctype_unknown); ;
    break;}
case 408:
#line 1114 "cgrammar.y"
{ yyval.ctyp = ctype_makeArray (yyvsp[-2].ctyp); ;
    break;}
case 409:
#line 1115 "cgrammar.y"
{ yyval.ctyp = ctype_makeArray (yyvsp[-3].ctyp); ;
    break;}
case 410:
#line 1117 "cgrammar.y"
{ yyval.ctyp = ctype_makeFunction (ctype_unknown, uentryList_makeMissingParams ()); ;
    break;}
case 411:
#line 1119 "cgrammar.y"
{ yyval.ctyp = ctype_makeParamsFunction (ctype_unknown, yyvsp[-1].entrylist); ;
    break;}
case 412:
#line 1121 "cgrammar.y"
{ yyval.ctyp = ctype_makeFunction (yyvsp[-3].ctyp, uentryList_makeMissingParams ()); ;
    break;}
case 413:
#line 1123 "cgrammar.y"
{ yyval.ctyp = ctype_makeParamsFunction (yyvsp[-4].ctyp, yyvsp[-1].entrylist); ;
    break;}
case 423:
#line 1139 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 426:
#line 1147 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 427:
#line 1151 "cgrammar.y"
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 428:
#line 1153 "cgrammar.y"
{ yyval.expr = exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr); ;
    break;}
case 429:
#line 1155 "cgrammar.y"
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 430:
#line 1157 "cgrammar.y"
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 431:
#line 1161 "cgrammar.y"
{ context_setProtectVars (); ;
    break;}
case 432:
#line 1161 "cgrammar.y"
{ context_sizeofReleaseVars (); ;
    break;}
case 433:
#line 1163 "cgrammar.y"
{ yyval.expr = exprNode_forPred (yyvsp[-7].expr, yyvsp[-5].expr, yyvsp[-2].expr); 
     context_enterForClause (yyvsp[-5].expr); ;
    break;}
case 434:
#line 1168 "cgrammar.y"
{ setProcessingIterVars (yyvsp[-2].entry); ;
    break;}
case 435:
#line 1170 "cgrammar.y"
{ yyval.expr = exprNode_iterStart (yyvsp[-5].entry, yyvsp[-1].alist); ;
    break;}
case 436:
#line 1171 "cgrammar.y"
{ yyval.expr = exprNode_createId (yyvsp[0].entry); ;
    break;}
case 440:
#line 1177 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 448:
#line 1185 "cgrammar.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 449:
#line 1186 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 450:
#line 1190 "cgrammar.y"
{ /* don't: context_exitTrueClause ($1, $2); */
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 451:
#line 1195 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 452:
#line 1198 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 463:
#line 1213 "cgrammar.y"
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 465:
#line 1215 "cgrammar.y"
{ yyval.expr = exprNode_makeError (); ;
    break;}
case 466:
#line 1218 "cgrammar.y"
{ yyval.expr = exprNode_labelStatement (yyvsp[-2].cname, yyvsp[0].expr); ;
    break;}
case 467:
#line 1219 "cgrammar.y"
{ yyval.expr = exprNode_notReached (yyvsp[0].expr); ;
    break;}
case 468:
#line 1225 "cgrammar.y"
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 469:
#line 1226 "cgrammar.y"
{ yyval.expr = exprNode_caseStatement (yyvsp[-3].expr, yyvsp[0].expr, FALSE); ;
    break;}
case 470:
#line 1227 "cgrammar.y"
{ context_enterCaseClause (yyvsp[0].expr); ;
    break;}
case 471:
#line 1228 "cgrammar.y"
{ yyval.expr = exprNode_caseStatement (yyvsp[-3].expr, yyvsp[0].expr, TRUE); ;
    break;}
case 472:
#line 1231 "cgrammar.y"
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 473:
#line 1232 "cgrammar.y"
{ yyval.expr = exprNode_defaultStatement (yyvsp[-3].tok, yyvsp[0].expr, FALSE); ;
    break;}
case 474:
#line 1233 "cgrammar.y"
{ context_enterCaseClause (exprNode_undefined); ;
    break;}
case 475:
#line 1234 "cgrammar.y"
{ yyval.expr = exprNode_defaultStatement (yyvsp[-3].tok, yyvsp[0].expr, TRUE); ;
    break;}
case 476:
#line 1237 "cgrammar.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 477:
#line 1239 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; context_exitInner (yyvsp[0].expr); ;
    break;}
case 478:
#line 1242 "cgrammar.y"
{ yyval.expr = yyvsp[-1].expr; ;
    break;}
case 479:
#line 1245 "cgrammar.y"
{ context_enterInnerContext (); ;
    break;}
case 480:
#line 1248 "cgrammar.y"
{ context_exitInnerPlain (); ;
    break;}
case 481:
#line 1251 "cgrammar.y"
{ context_enterStructInnerContext (); ;
    break;}
case 482:
#line 1254 "cgrammar.y"
{ context_exitStructInnerContext (); ;
    break;}
case 483:
#line 1257 "cgrammar.y"
{ context_exitInnerSafe (); ;
    break;}
case 484:
#line 1260 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 485:
#line 1261 "cgrammar.y"
{ yyval.expr = exprNode_notReached (exprNode_createTok (yyvsp[0].tok)); ;
    break;}
case 486:
#line 1262 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 487:
#line 1264 "cgrammar.y"
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 488:
#line 1265 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 489:
#line 1267 "cgrammar.y"
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (yyvsp[-2].expr, lltok_getLoc (yyvsp[0].tok))); ;
    break;}
case 490:
#line 1269 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 491:
#line 1271 "cgrammar.y"
{ yyval.expr = exprNode_notReached (exprNode_updateLocation (exprNode_concat (yyvsp[-3].expr, yyvsp[-2].expr), 
							lltok_getLoc (yyvsp[-1].tok))); 
   ;
    break;}
case 492:
#line 1278 "cgrammar.y"
{ yyval.expr = exprNode_makeBlock (yyvsp[0].expr); ;
    break;}
case 493:
#line 1282 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 494:
#line 1284 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 495:
#line 1286 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (yyvsp[-1].expr, lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 496:
#line 1288 "cgrammar.y"
{ yyval.expr = exprNode_updateLocation (exprNode_concat (yyvsp[-2].expr, yyvsp[-1].expr), lltok_getLoc (yyvsp[0].tok)); ;
    break;}
case 498:
#line 1292 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 499:
#line 1295 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 500:
#line 1296 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 501:
#line 1299 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 502:
#line 1300 "cgrammar.y"
{ yyval.expr = exprNode_concat (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 503:
#line 1303 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 504:
#line 1304 "cgrammar.y"
{ yyval.expr = exprNode_statement (yyvsp[-1].expr); ;
    break;}
case 505:
#line 1307 "cgrammar.y"
{ yyval.expr = exprNode_createTok (yyvsp[0].tok); ;
    break;}
case 506:
#line 1308 "cgrammar.y"
{ yyval.expr = exprNode_statement (yyvsp[-1].expr); ;
    break;}
case 507:
#line 1309 "cgrammar.y"
{ yyval.expr = exprNode_checkExpr (yyvsp[0].expr); ;
    break;}
case 508:
#line 1313 "cgrammar.y"
{ yyval.expr = yyvsp[-1].expr; exprNode_produceGuards (yyvsp[-1].expr); context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 509:
#line 1321 "cgrammar.y"
{ 
     context_exitTrueClause (yyvsp[-1].expr, yyvsp[0].expr);
     yyval.expr = exprNode_if (yyvsp[-1].expr, yyvsp[0].expr); 
   ;
    break;}
case 510:
#line 1325 "cgrammar.y"
{ context_enterFalseClause (yyvsp[-2].expr); ;
    break;}
case 511:
#line 1326 "cgrammar.y"
{
     context_exitClause (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr);
     yyval.expr = exprNode_ifelse (yyvsp[-4].expr, yyvsp[-3].expr, yyvsp[0].expr); 
   ;
    break;}
case 512:
#line 1330 "cgrammar.y"
{ context_enterSwitch (yyvsp[0].expr); ;
    break;}
case 513:
#line 1331 "cgrammar.y"
{ yyval.expr = exprNode_switch (yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 514:
#line 1335 "cgrammar.y"
{ yyval.expr = exprNode_whilePred (yyvsp[-1].expr); context_enterWhileClause (yyvsp[-1].expr); ;
    break;}
case 515:
#line 1339 "cgrammar.y"
{ yyval.expr = exprNode_whilePred(yyvsp[-1].expr); ;
    break;}
case 516:
#line 1342 "cgrammar.y"
{ context_enterIterClause (); ;
    break;}
case 517:
#line 1343 "cgrammar.y"
{ setProcessingIterVars (yyvsp[-3].entry); ;
    break;}
case 518:
#line 1346 "cgrammar.y"
{ 
     yyval.expr = exprNode_iter (yyvsp[-9].entry, yyvsp[-4].alist, yyvsp[-2].expr, yyvsp[-1].entry); 

   ;
    break;}
case 519:
#line 1352 "cgrammar.y"
{ yyval.alist = exprNodeList_singleton (yyvsp[0].expr); ;
    break;}
case 520:
#line 1353 "cgrammar.y"
{ nextIterParam (); ;
    break;}
case 521:
#line 1354 "cgrammar.y"
{ yyval.alist = exprNodeList_push (yyvsp[-3].alist, yyvsp[0].expr); ;
    break;}
case 522:
#line 1357 "cgrammar.y"
{ yyval.expr = exprNode_iterExpr (yyvsp[0].expr); ;
    break;}
case 523:
#line 1358 "cgrammar.y"
{ yyval.expr = exprNode_iterId (yyvsp[0].entry); ;
    break;}
case 524:
#line 1359 "cgrammar.y"
{ uentry ue = coerceIterId (yyvsp[0].ctyp);

		      if (uentry_isValid (ue)) 
			{
			  yyval.expr = exprNode_iterId (ue);
			}
		      else
			{
			  yyval.expr = exprNode_iterNewId (cstring_copy (LastIdentifier ()));
			}
		    ;
    break;}
case 525:
#line 1370 "cgrammar.y"
{ yyval.expr = exprNode_iterNewId (yyvsp[0].cname); ;
    break;}
case 527:
#line 1378 "cgrammar.y"
{ yyval.expr = exprNode_addParens (yyvsp[-2].tok, yyvsp[-1].expr); ;
    break;}
case 529:
#line 1382 "cgrammar.y"
{ yyval.expr = exprNode_arrayFetch (yyvsp[-3].expr, yyvsp[-1].expr); ;
    break;}
case 530:
#line 1383 "cgrammar.y"
{ yyval.expr = exprNode_functionCall (yyvsp[-2].expr, exprNodeList_new ()); ;
    break;}
case 531:
#line 1384 "cgrammar.y"
{ yyval.expr = exprNode_functionCall (yyvsp[-3].expr, yyvsp[-1].alist); ;
    break;}
case 532:
#line 1386 "cgrammar.y"
{ yyval.expr = exprNode_vaArg (yyvsp[-5].tok, yyvsp[-3].expr, yyvsp[-1].qtyp); ;
    break;}
case 533:
#line 1387 "cgrammar.y"
{ yyval.expr = exprNode_fieldAccess (yyvsp[-4].expr, yyvsp[-1].cname); ;
    break;}
case 534:
#line 1388 "cgrammar.y"
{ yyval.expr = exprNode_arrowAccess (yyvsp[-4].expr, yyvsp[-1].cname); ;
    break;}
case 535:
#line 1389 "cgrammar.y"
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 536:
#line 1390 "cgrammar.y"
{ yyval.expr = exprNode_postOp (yyvsp[-1].expr, yyvsp[0].tok); ;
    break;}
case 538:
#line 1394 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 539:
#line 1395 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 540:
#line 1396 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 541:
#line 1397 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 542:
#line 1398 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 543:
#line 1399 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 544:
#line 1400 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 545:
#line 1401 "cgrammar.y"
{ yyval.expr = exprNode_preOp (yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 546:
#line 1402 "cgrammar.y"
{ yyval.expr = yyvsp[0].expr; ;
    break;}
case 548:
#line 1406 "cgrammar.y"
{ yyval.expr = exprNode_cast (yyvsp[-3].tok, yyvsp[0].expr, yyvsp[-2].qtyp); ;
    break;}
case 550:
#line 1410 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 551:
#line 1411 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 552:
#line 1412 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 554:
#line 1416 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 555:
#line 1417 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 557:
#line 1421 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 558:
#line 1422 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 560:
#line 1426 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 561:
#line 1427 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 562:
#line 1428 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 563:
#line 1429 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 565:
#line 1433 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 566:
#line 1434 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 568:
#line 1438 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 570:
#line 1442 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 572:
#line 1447 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 574:
#line 1451 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 576:
#line 1455 "cgrammar.y"
{ yyval.expr = exprNode_op (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 578:
#line 1459 "cgrammar.y"
{ context_enterTrueClause (yyvsp[-1].expr); ;
    break;}
case 579:
#line 1460 "cgrammar.y"
{ context_enterFalseClause (yyvsp[-4].expr); ;
    break;}
case 580:
#line 1461 "cgrammar.y"
{ yyval.expr = exprNode_cond (yyvsp[-6].expr, yyvsp[-3].expr, yyvsp[0].expr); ;
    break;}
case 582:
#line 1465 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 583:
#line 1466 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 584:
#line 1467 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 585:
#line 1468 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 586:
#line 1469 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 587:
#line 1470 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 588:
#line 1471 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 589:
#line 1472 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 590:
#line 1473 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 591:
#line 1474 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 592:
#line 1475 "cgrammar.y"
{ yyval.expr = exprNode_assign (yyvsp[-2].expr, yyvsp[0].expr, yyvsp[-1].tok); ;
    break;}
case 593:
#line 1478 "cgrammar.y"
{ yyval.entry = yyvsp[0].entry; ;
    break;}
case 594:
#line 1479 "cgrammar.y"
{ yyval.entry = uentry_undefined; ;
    break;}
case 595:
#line 1482 "cgrammar.y"
{ context_enterDoWhileClause (); yyval.tok = yyvsp[0].tok; ;
    break;}
case 596:
#line 1486 "cgrammar.y"
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 597:
#line 1488 "cgrammar.y"
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr)); ;
    break;}
case 598:
#line 1490 "cgrammar.y"
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 599:
#line 1493 "cgrammar.y"
{ yyval.expr = exprNode_while (yyvsp[-1].expr, yyvsp[0].expr); context_exitWhileClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 600:
#line 1495 "cgrammar.y"
{ yyval.expr = exprNode_statement (exprNode_doWhile (yyvsp[-5].expr, yyvsp[-2].expr)); ;
    break;}
case 601:
#line 1497 "cgrammar.y"
{ yyval.expr = exprNode_doWhile (yyvsp[-4].expr, yyvsp[-1].expr); ;
    break;}
case 602:
#line 1498 "cgrammar.y"
{ yyval.expr = exprNode_for (yyvsp[-1].expr, yyvsp[0].expr); context_exitForClause (yyvsp[-1].expr, yyvsp[0].expr); ;
    break;}
case 603:
#line 1501 "cgrammar.y"
{ yyval.expr = exprNode_goto (yyvsp[-1].cname); ;
    break;}
case 604:
#line 1502 "cgrammar.y"
{ yyval.expr = exprNode_continue (yyvsp[-1].tok, BADTOK); ;
    break;}
case 605:
#line 1504 "cgrammar.y"
{ yyval.expr = exprNode_continue (yyvsp[-2].tok, QINNERCONTINUE); ;
    break;}
case 606:
#line 1505 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, BADTOK); ;
    break;}
case 607:
#line 1506 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSWITCHBREAK); ;
    break;}
case 608:
#line 1507 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QLOOPBREAK); ;
    break;}
case 609:
#line 1508 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QINNERBREAK); ;
    break;}
case 610:
#line 1509 "cgrammar.y"
{ yyval.expr = exprNode_break (yyvsp[-1].tok, QSAFEBREAK); ;
    break;}
case 611:
#line 1510 "cgrammar.y"
{ yyval.expr = exprNode_nullReturn (yyvsp[-1].tok); ;
    break;}
case 612:
#line 1511 "cgrammar.y"
{ yyval.expr = exprNode_return (yyvsp[-1].expr); ;
    break;}
case 614:
#line 1515 "cgrammar.y"
{ ; ;
    break;}
case 617:
#line 1522 "cgrammar.y"
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 618:
#line 1523 "cgrammar.y"
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
case 619:
#line 1524 "cgrammar.y"
{ yyval.cname = uentry_getName (yyvsp[0].entry); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/af9/evans/bison-1.28/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      sfree(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      sfree (yyss);
      sfree (yyvs);
#ifdef YYLSP_NEEDED
      sfree (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      sfree (yyss);
      sfree (yyvs);
#ifdef YYLSP_NEEDED
      sfree (yyls);
#endif
    }
  return 1;
}
#line 1530 "cgrammar.y"


/*@-redecl@*/
extern char *yytext;
/*@=redecl@*/

# include "bison.reset"

void yyerror (/*@unused@*/ char *s) 
{
  static bool givehint = FALSE;

  if (context_inIterDef ())
    {
      llerror (FLG_SYNTAX, message ("Iter syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inIterEnd ())
    {
      llerror (FLG_SYNTAX, message ("Iter finalizer syntax not parseable: %s", 
				    context_inFunctionName ()));
    }
  else if (context_inMacro ())
    {
      llerror (FLG_SYNTAX, message ("Macro syntax not parseable: %s", 
				    context_inFunctionName ()));
      
      if (context_inMacroUnknown ())
	{
	  if (!givehint)
	    {
	      llhint (cstring_makeLiteral 
		     ("Precede macro definition with /*@notfunction@*/ "
		      "to suppress checking and force expansion"));
	      givehint = TRUE;
	    }
	}

      swallowMacro ();
    }
  else
    {
      llparseerror (cstring_undefined);
    }
}













